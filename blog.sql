-- MySQL dump 10.13  Distrib 5.7.25, for Linux (x86_64)
--
-- Host: localhost    Database: blog
-- ------------------------------------------------------
-- Server version	5.7.25

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `article`
--

DROP TABLE IF EXISTS `article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `article` (
  `article_id` int(11) NOT NULL AUTO_INCREMENT,
  `article_user_id` int(11) unsigned DEFAULT NULL,
  `article_user_name` varchar(255) DEFAULT NULL,
  `article_title` varchar(255) DEFAULT NULL,
  `article_content` mediumtext,
  `article_view_count` int(11) DEFAULT '0',
  `article_comment_count` int(11) DEFAULT '0',
  `article_like_count` int(11) DEFAULT '0',
  `article_is_comment` int(1) unsigned DEFAULT NULL,
  `article_status` int(1) unsigned DEFAULT '1',
  `article_order` int(11) unsigned DEFAULT NULL,
  `article_update_time` varchar(255) DEFAULT NULL,
  `article_create_time` varchar(255) DEFAULT NULL,
  `article_dislike_count` int(1) DEFAULT NULL,
  PRIMARY KEY (`article_id`) USING BTREE
) ENGINE=MyISAM AUTO_INCREMENT=64 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `article`
--

LOCK TABLES `article` WRITE;
/*!40000 ALTER TABLE `article` DISABLE KEYS */;
INSERT INTO `article` VALUES (41,1,'selenium','mysql查漏补缺','<p><br/></p><p>Mysql查漏补缺<br/></p><p><br/></p><p>1.mysql中+的作用:</p><p>&nbsp; &nbsp; &nbsp; &nbsp;1.如果两边都为数值，则数值直接相加</p><p>&nbsp; &nbsp; &nbsp; &nbsp;2.如果一边为数值一边不为数值，则尝试将不为数值的一边进行转换：</p><p><span style=\"white-space:pre\">	</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1.转换成功，直接相加</p><p><span style=\"white-space:pre\">		</span> 2.转换不成功，转换成0后相加</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;3.如果有一边为null，则不管另外一边为什么都为null</p><p><br/></p><p>2.mysql中转义:</p><p>&nbsp; &nbsp; &nbsp; 1.使用\\直接进行转义</p><p>&nbsp; &nbsp; &nbsp; 2.使用escape关键字制定转义字符&nbsp;</p><p><span style=\"white-space:pre\">	</span>&nbsp; eg:查询文章标题中包含_的文章</p><pre class=\"brush:sql;toolbar:false\">&nbsp;&nbsp;&nbsp;select&nbsp;*&nbsp;from&nbsp;article&nbsp;where&nbsp;article_title&nbsp;liek&nbsp;&#39;%\\_%&#39;;\r\n&nbsp;&nbsp;&nbsp;select&nbsp;*&nbsp;from&nbsp;article&nbsp;where&nbsp;article_title&nbsp;like&nbsp;&#39;%$_%&#39;escapse&#39;$&#39;;</pre><p><br/></p><p>3.查询的结果中有null:</p><p>&nbsp; &nbsp; &nbsp; 1.为了避免结果不符合预期可以用IFNULL(selectValue,replaceVulue)函数 进行处理，如果查询的值为null会自动替换为replaceValue</p><p><br/></p><p>4.mysql约束:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 1.六大约束</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1.NOT NULL:保证字段不为空</p><p><span style=\"white-space:pre\">	</span>&nbsp; &nbsp; 2.DEFAULT:保证字段有默认值</p><p><span style=\"white-space:pre\">	</span>&nbsp; &nbsp; 3.PRIMARY:保证字段具有唯一性且非空，只可以有一个主键,可以用多个字段来组成这个主键</p><p><span style=\"white-space:pre\">	</span>&nbsp; &nbsp; 4.UNIQUE:保证唯一性但可以为空可以有多个</p><p><span style=\"white-space:pre\">	</span>&nbsp; &nbsp; 5.CHECK:mysql中不支持</p><p>&nbsp; <span style=\"white-space:pre\">	</span>&nbsp; &nbsp; 6.FOREIGN KEY:限制i两个表的关系，用于保证改字段的值必须来自主表的关联列的值</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 2.添加约束的时机</p><p><span style=\"white-space:pre\">	</span>&nbsp; &nbsp; 1.创建表时</p><p><span style=\"white-space:pre\">	</span>&nbsp; &nbsp;2.修改表时</p><p><span style=\"white-space:pre\">	</span>3.添加约束的分类</p><p><span style=\"white-space:pre\">	</span>&nbsp; &nbsp; 1.列级约束:六大约束语法上都支持，但是外键约束没有效果</p><p><span style=\"white-space:pre\">		</span>2.表级约束:除了非空,默认，其他的都支持</p><p><span style=\"white-space:pre\">		</span>&nbsp; &nbsp; 1.语法:</p><p><span style=\"white-space:pre\">			</span>&nbsp; &nbsp;在各个字段的最下面</p><p><span style=\"white-space:pre\">			</span>&nbsp; &nbsp;[constraint 约束名] 约束类型(字段名)</p><p><span style=\"white-space:pre\">		</span>&nbsp; &nbsp; 2.外键的一些特点:</p><p><span style=\"white-space:pre\">			</span>&nbsp; &nbsp;1.在从表上添加外键</p><p><span style=\"white-space:pre\">			</span>&nbsp; &nbsp;2.所设置外键的字段不能为主键</p><p><span style=\"white-space:pre\">			</span>&nbsp; &nbsp;3.外键所参考的字段必须为key(primary key,unique)</p><p><span style=\"white-space:pre\">			</span>&nbsp; &nbsp;4.两个字段必须具有相同的数据类型和约束</p><p><span style=\"white-space:pre\">			</span>&nbsp; &nbsp;5.插入数据和删除数据时应该注意主表从表的先后顺序</p><p><span style=\"white-space:pre\">			</span>&nbsp; &nbsp;</p><p>5.mysql事务:https://www.cnblogs.com/huanongying/p/7021555.html</p><p>&nbsp; &nbsp; 1.ACID:原子性，一致性，隔离性，持久性&nbsp;</p><p>&nbsp; &nbsp; 2.事务的创建(隐式事务和显式事务)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 1.显式事务(如果不commit也不rollback则数据只会在当前会话中有效):</p><p><span style=\"white-space:pre\">		</span>&nbsp; &nbsp; &nbsp; &nbsp; 1.set autocommit=0;</p><p><span style=\"white-space:pre\">			</span>2.start transction;</p><p><span style=\"white-space:pre\">			</span>3.编写sql语句</p><p><span style=\"white-space:pre\">			</span>4.commit;或者rollback;</p><p>&nbsp; &nbsp; 3.一些并发的问题</p><p><span style=\"white-space:pre\">	</span>&nbsp; &nbsp; &nbsp; &nbsp; 1.脏读</p><p><span style=\"white-space:pre\">		</span>2.不可重复读</p><p><span style=\"white-space:pre\">		</span>3.幻读</p><p><span style=\"white-space:pre\">	</span>4.隔离级别</p><p><span style=\"white-space:pre\">	</span>&nbsp; &nbsp; &nbsp; &nbsp; 1.读未提交</p><p><span style=\"white-space:pre\">		</span>2.不可重复读</p><p><span style=\"white-space:pre\">		</span>3.可重复读</p><p><span style=\"white-space:pre\">		</span>4.串行化</p><p><span style=\"white-space:pre\">	</span>5.回滚:</p><p><span style=\"white-space:pre\">	</span>&nbsp; &nbsp; &nbsp; &nbsp; 1.rollback</p><p><span style=\"white-space:pre\">		</span>2.savepoint+rollback</p><p>6.delete和trancate区别</p><p>&nbsp; &nbsp;1.delete删除表结构和数据，支持回滚</p><p>&nbsp; &nbsp;2.trancate删除表数据，不支持回滚</p><p>7.自定义用户变量</p><p>&nbsp; &nbsp;1.创建 set@变量名=变量值</p><p>&nbsp; &nbsp;2.查看select @变量名</p><p>8.存储过程和函数(这里以存储过程为例)(类似于方法)</p><p><span style=\"white-space:pre\">	</span>1.创建存储过程</p><p><span style=\"white-space:pre\">	</span>&nbsp; &nbsp;create procedure 存储过程名(参数列表)</p><p><span style=\"white-space:pre\">	</span>&nbsp; &nbsp;begin</p><p><span style=\"white-space:pre\">	</span>&nbsp; &nbsp; &nbsp; 方法体(一组合法有效的sql语句)</p><p><span style=\"white-space:pre\">	</span>&nbsp; &nbsp;end</p><p><span style=\"white-space:pre\">	</span>&nbsp; &nbsp;注意:1.参数列表包含三部分</p><p><span style=\"white-space:pre\">	</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1.参数模式:in out inout</p><p><span style=\"white-space:pre\">				</span>2.参数名</p><p><span style=\"white-space:pre\">				</span>3.参数类型</p><p><span style=\"white-space:pre\">		</span>&nbsp; &nbsp;2.存储过程体只有一句话可以省略begin end</p><p><span style=\"white-space:pre\">		</span>&nbsp; &nbsp; 3.存储过程中的每条sql语句结尾必须加分号,存储过程结束可以通过DELIMITER设置结束标志</p><p><span style=\"white-space:pre\">	</span>2.调用存储过程</p><p><span style=\"white-space:pre\">	</span>&nbsp; &nbsp; call 存储过程名(实参列表名)</p><p><span style=\"white-space:pre\">	</span>3.删除存储过程</p><p><span style=\"white-space:pre\">	</span>&nbsp; &nbsp;drop procedure 存储过程</p><p><br/></p><p><br/></p>',0,0,0,1,1,0,'2019-03-25  20:04:00','2019-03-25  20:04:00',0),(42,1,'selenium','在javase和javaweb环境下shiro的搭建','<h3>javase环境下搭建shiro<br/></h3><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1.导入jar包</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2.配置文件:存储临时文件</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;shiro.ini文件:存储数据,用户名,密码,角色,权限</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 3.代码</p><pre class=\"brush:java;toolbar:false\">&nbsp;//&nbsp;1.获取安全管理器\r\nFactory&lt;SecurityManager&gt;&nbsp;factory&nbsp;=&nbsp;new&nbsp;IniSecurityManagerFactory(&quot;classpath:shiro.ini&quot;);\r\nSecurityManager&nbsp;securityManager&nbsp;=&nbsp;factory.getInstance();\r\n//&nbsp;2.设置安全管理器\r\nSecurityUtils.setSecurityManager(securityManager);\r\n//&nbsp;3.获取subject对象,即要登录的对象\r\nSubject&nbsp;subject&nbsp;=&nbsp;SecurityUtils.getSubject();</pre><h3>spring与shiro集成<br/></h3><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1.导入jar包</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2.搭建好spring,springmvc</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 3.搭建shiro环境</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1.web.xml</p><pre class=\"brush:xml;toolbar:false\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;filter&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;filter-name&gt;shiroFilter&lt;/filter-name&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;init-param&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;param-name&gt;targetFilterLifecycle&lt;/param-name&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;param-value&gt;true&lt;/param-value&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/init-param&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/filter&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;filter-mapping&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;filter-name&gt;shiroFilter&lt;/filter-name&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;url-pattern&gt;/*&lt;/url-pattern&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/filter-mapping&gt;</pre><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;4.在spring.xml中进行相关配置</p><p><br/></p><p>&nbsp; shiro配置的核心:spring.xml欧中配置的一个bean</p><pre class=\"brush:xml;toolbar:false\">&lt;bean&nbsp;class=&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;&gt;&lt;/bean&gt;</pre><p><br/></p><p>web.xml中DelegatingFilterProxy作用:入口,完成servlet容器到ioc容器的关联,到spring容器中找filter-name相同名字的bean实例</p><p>如果没有配置targetBeanName属性,则filter-name必须与bean的name相同</p><p><br/></p><p>表单提交的数据封装到 usernamePasswordToken 数据库查询到的数据封装到SimpleAuthenticationInfo</p><p><br/></p><p>加密:MD5, SHA1</p><p>1.存储数据时需要将用户输入的明文继续加密(Hibernate当中涉及md5加密)&nbsp; (Ream.java)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //将存入数据库的密码进行MD5加密</p><pre class=\"brush:java;toolbar:false\">SimpleHash&nbsp;sh&nbsp;=&nbsp;new&nbsp;SimpleHash(&quot;md5&quot;,&nbsp;credentials,&nbsp;null,&nbsp;2019);</pre><p>2.前端用户输入的值,进行加密,string字符串经过md5加密(spring.xml)</p><pre class=\"brush:xml;toolbar:false\">&nbsp;&nbsp;&lt;!--&nbsp;将前端的输入的密码进行md5的加密&nbsp;--&gt;\r\n&nbsp;&nbsp;&lt;property&nbsp;name=&quot;credentialsMatcher&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;class=&quot;org.apache.shiro.authc.credential.HashedCredentialsMatcher&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;hashAlgorithmName&quot;&nbsp;value=&quot;md5&quot;&gt;&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;hashIterations&quot;&nbsp;value=&quot;2019&quot;&gt;&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/bean&gt;\r\n&nbsp;&lt;/property&gt;</pre><p>盐值加密:原有加密的基础上加密(两个相同密码在数据库存储的值还是不一样)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 1.前端token当中获取的密码应该进行盐值加密</p><pre class=\"brush:java;toolbar:false;\">&nbsp;ByteSource&nbsp;salt&nbsp;=&nbsp;ByteSource.Util.bytes(principal);</pre><pre class=\"brush:java;toolbar:false\">&nbsp;new&nbsp;SimpleAuthenticationInfo(principal,&nbsp;sh,&nbsp;salt,&nbsp;realmName);</pre><p>&nbsp; &nbsp; &nbsp; &nbsp; 2.数据库中的值进行盐值加密</p><pre class=\"brush:java;toolbar:false\">&nbsp;new&nbsp;SimpleHash(&quot;md5&quot;,&nbsp;credentials,&nbsp;salt,&nbsp;2019);</pre><p>多Realm获取数据:将一个密码存放在多个数据库中,建立多个Realm,并且每个realm使用不同的加密方式,在subject.login中会进行多个realm的调用,执行多次验证,提高数据安全性</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1.第一种方法:</p><pre class=\"brush:xml;toolbar:false\">&lt;!--&nbsp;多个realm&nbsp;--&gt;\r\n&lt;property&nbsp;name=&quot;realms&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&lt;list&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ref&nbsp;bean=&quot;jdbcRealm&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ref&nbsp;bean=&quot;jdbcRealm1&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&nbsp;&lt;/list&gt;\r\n&lt;/property&gt;</pre><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;2.第二种方法:通过ModularRealmAuthenticator认证器</p><p><br/></p><p>shiro认证策略:多个realm访问多个数据库,如何判断是否登录成功</p><p>&nbsp; 1.FirstSucessfulStrategy&nbsp; &nbsp; 第一个realm认证成功就算成功</p><p>&nbsp; 2.AtLeastOneSuccessfulStrategy 多个realm认证时,一个成功代表成功(默认)</p><p>&nbsp; 3.AllSuccessfulStrategy 多个realm认证时,全部成功才代表成功</p><p><br/></p><p>授权:控制哪一个用户可以访问哪一个web资源</p><p>&nbsp; &nbsp; &nbsp;1.编程式</p><pre class=\"brush:java;toolbar:false\">&nbsp;if(subect.hasRole){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//有权限\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//没有权限\r\n&nbsp;&nbsp;&nbsp;&nbsp;}</pre><p>&nbsp; &nbsp; &nbsp;2.注解式:通过在执行的java方法上注解</p><pre class=\"brush:java;toolbar:false\">@RequireRoles(&quot;admin&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;hello(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//有权限\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre><p>&nbsp; &nbsp; &nbsp;3.jsp/gsp标签</p><p>&nbsp; &nbsp; &lt;shiro:hasRole name=&quot;admin&quot;&gt;有权限&lt;/shiro:hasRole&gt;</p><p>1.在FilterChainDefinitions中定义web资源对应角色</p><p>&nbsp; &nbsp; &nbsp; web资源=roles[角色名称]</p><p>&nbsp; &nbsp; &nbsp; &nbsp;/admin.jsp=roles[admin]</p><p>2.一个用户进行登录认证成功之后,之中还是要查找认证成功的角色拥有什么角色.realm可以和数据库交互,获取指定认证成功的用户对应的角色</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 1.我们可以自定义一个Realm,继承AuthorizingRealm,认证和授权</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 2.在ioc容器配置指定的Realm的bean实例(授权器)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 3.告知securityManager使用哪一个授权管理器</p><p>参考视频:</p><p>https://ke.qq.com/webcourse/index.html#cid=197393&amp;term_id=100233954&amp;taid=1223524513678097&amp;vid=x14177geywk</p><p><br/></p>',0,0,0,1,1,0,'2019-03-25  20:15:01','2019-03-25  20:15:01',0),(47,1,'selenium','使用爬虫爬有道翻译','<p style=\"text-align: left;\">import urllib.request</p><p style=\"text-align: left;\">import urllib.parse</p><p style=\"text-align: left;\">import json</p><p style=\"text-align: left;\">content = input(&#39;请输入你要翻译文本\\n&#39;)</p><p style=\"text-align: left;\">data = {}</p><p style=\"text-align: left;\">data[&#39;i&#39;] = content</p><p style=\"text-align: left;\">data[&#39;from&#39;] = &#39;AUTO&#39;</p><p style=\"text-align: left;\">data[&#39;to&#39;] = &#39;AUTO&#39;</p><p style=\"text-align: left;\">data[&#39;smartresult&#39;] = &#39;dict&#39;</p><p style=\"text-align: left;\">data[&#39;client&#39;] = &#39;fanyideskweb&#39;</p><p style=\"text-align: left;\">data[&#39;salt&#39;] = &#39;f&#39;</p><p style=\"text-align: left;\">data[&#39;sign&#39;] = &#39;sign&#39;</p><p style=\"text-align: left;\">data[&#39;doctype&#39;] = &#39;json&#39;</p><p style=\"text-align: left;\">data[&#39;version&#39;] = &#39;2.1&#39;</p><p style=\"text-align: left;\">data[&#39;keyfrom&#39;] = &#39;fanyi.web&#39;</p><p style=\"text-align: left;\">data[&#39;action&#39;] = &#39;FY_BY_CL1CKBUTTON&#39;</p><p style=\"text-align: left;\">data[&#39;typoResult&#39;] = &#39;true&#39;</p><p style=\"text-align: left;\">url = &#39;http://fanyi.youdao.com/translate&#39;</p><p style=\"text-align: left;\">data = urllib.parse.urlencode(data).encode(&#39;utf-8&#39;)</p><p style=\"text-align: left;\">request = urllib.request.Request(url = url, data = data)</p><p style=\"text-align: left;\">response = urllib.request.urlopen(request)</p><p style=\"text-align: left;\">html = response.read().decode(&#39;utf-8&#39;)</p><p style=\"text-align: left;\">html = json.loads(html)</p><p style=\"text-align: left;\">print(html[&#39;translateResult&#39;][0][0][&#39;tgt&#39;])</p>',0,0,0,1,1,0,'2019-03-25  20:33:52','2019-03-25  20:33:52',0),(48,1,'selenium','利用python发送邮件','<p>#coding: utf - 8<br/></p><p>from email.header</p><p>import Header</p><p>from email.mime.text</p><p>import MIMEText</p><p>from email.utils</p><p>import parseaddr, formataddr</p><p>import smtplib</p><p><br/></p><p>def _format_addr(s):</p><p>&nbsp; &nbsp; name, addr = parseaddr(s)<br/></p><p>return formataddr((Header(name, &#39;utf-8&#39;).encode(), addr))<br/></p><p><br/></p><p># 发件人地址</p><p>from_addr = &#39;18221390332@163.com&#39;<br/></p><p>#邮箱密码</p><p>password = &#39;不告诉你们&#39;</p><p>#收件人地址<br/></p><p>to_addr = &#39;2254553781@qq.com&#39;<br/></p><p>#163网易邮箱服务器地址 smtp_server = &#39;smtp.163.com&#39;</p><p>#设置邮件信息<br/></p><p>msg = MIMEText(&#39;段老师起床学习了！！！&#39;, &#39;plain&#39;, &#39;utf-8&#39;)<br/></p><p>msg[&#39;From&#39;] = _format_addr(&#39;你的涛爸爸&lt;%s&gt;&#39; % from_addr)<br/></p><p>msg[&#39;To&#39;] = _format_addr(&#39;管理员 &lt;%s&gt;&#39; % to_addr)<br/></p><p>msg[&#39;Subject&#39;] = Header(&#39;段老师学习了！！！&#39;, &#39;utf-8&#39;).encode()<br/></p><p># 发送邮件<br/></p><p>i = 0;<br/></p><p>while (i &lt; 10):<br/></p><p>&nbsp; &nbsp; server = smtplib.SMTP(smtp_server, 25)<br/></p><p>&nbsp; &nbsp; server.login(from_addr, password)<br/></p><p>&nbsp; &nbsp; server.sendmail(from_addr, [to_addr], msg.as_string())<br/></p><p>&nbsp; &nbsp; server.quit()</p><p>&nbsp; &nbsp; i = i + 1</p><p><br/></p>',0,0,0,1,1,0,'2019-03-25  20:36:01','2019-03-25  20:36:01',0),(46,1,'selenium','使用爬虫批量下载图片','<p style=\"text-align: left;\">import requests</p><p style=\"text-align: left;\">from bs4</p><p style=\"text-align: left;\">import BeautifulSoup</p><p style=\"text-align: left;\">import re</p><p style=\"text-align: left;\"><br/></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; overflow-wrap: break-word; color: rgb(51, 51, 51); font-size: 14px; background-color: rgb(255, 255, 255);\">url=&#39;http://www.quanjing.com/&#39;</pre><p style=\"text-align: left;\">headers = {</p><p style=\"text-align: left;\">&nbsp; &nbsp; &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3253.3 Safari/537.36&#39;</p><p style=\"text-align: left;\">}</p><p style=\"text-align: left;\">response = requests.get(url = url, headers = headers)</p><p style=\"text-align: left;\">response.encoding = &#39;utf-8&#39;</p><p style=\"text-align: left;\">html = response.text</p><p style=\"text-align: left;\">soup = BeautifulSoup(html, &#39;html.parser&#39;)</p><p style=\"text-align: left;\">imgs_src = soup.find_all(&#39;img&#39;, src = re.compile(&#39;^/image/2017index/&#39;))</p><p style=\"text-align: left;\">count = 1</p><p style=\"text-align: left;\">for i in imgs_src:</p><p style=\"text-align: left;\">&nbsp; &nbsp; img_src = &#39;http://www.quanjing.com&#39; + i[&#39;src&#39;]</p><p style=\"text-align: left;\">response = requests.get(url = img_src, headers = headers, stream = True)</p><p style=\"text-align: left;\">with open(&#39;D:/Python/img/&#39; + str(count) + &#39;.jpg&#39;, &#39;wb&#39;) as f:</p><p style=\"text-align: left;\">&nbsp; &nbsp; #以字节流的方式写入， 每128个流遍历一次， 完成后为一张照片</p><p style=\"text-align: left;\">for data in response.iter_content(128):</p><p style=\"text-align: left;\">&nbsp; &nbsp; f.write(data)</p><p style=\"text-align: left;\">print(&#39;第%d张照片下载完毕\\n&#39; % count)</p><p style=\"text-align: left;\">count = count + 1</p><p style=\"text-align: left;\">print(&#39;照片下载完毕&#39;)</p><p style=\"text-align: left;\"><br/></p><p style=\"text-align: left;\">出现的两个问题：</p><p style=\"text-align: left;\">1.字符串与int类型不能直接凭借， 需要拼接前通过str() 将int类型转出str</p><p style=\"text-align: left;\">2.下载照片时， 图片是二进制文件， 需要使用字节流将文件写入</p>',0,0,0,1,1,0,'2019-03-25  20:31:49','2019-03-25  20:31:49',0),(49,1,'selenium','用python+selenium自动登录上海电机学院官网并选课','<p><br/></p><p style=\"text-align: left;\">from selenium</p><p style=\"text-align: left;\">import webdriver</p><p style=\"text-align: left;\">from selenium.webdriver.support.ui</p><p style=\"text-align: left;\">import WebDriverWait</p><p style=\"text-align: left;\">import time<br/></p><p><br/></p><p style=\"text-align: left;\">driver = webdriver.Chrome()</p><p style=\"text-align: left;\">driver.get(&quot;http://www.sdju.edu.cn&quot;)</p><p style=\"text-align: left;\">driver.maximize_window()</p><p style=\"text-align: left;\">driver.find_element_by_xpath(&quot;//*[@id=&#39;link&#39;]/div/div/div/div/div/p[1]/a[3]&quot;).click()</p><p style=\"text-align: left;\">print(driver.current_url)</p><p style=\"text-align: left;\">driver.switch_to_window(driver.window_handles[1])</p><p style=\"text-align: left;\">print(driver.current_url)</p><p style=\"text-align: left;\">driver.find_element_by_xpath(&quot;/html/body/div/div[2]/div/div[1]&quot;).click()</p><p style=\"text-align: left;\">driver.switch_to_window(driver.window_handles[2])</p><p style=\"text-align: left;\">print(&quot;未跳转前handle&quot;)</p><p style=\"text-align: left;\">print(driver.current_window_handle)</p><p style=\"text-align: left;\">print(&quot;未跳转前全部handle&quot;)</p><p style=\"text-align: left;\">print(driver.window_handles)</p><p style=\"text-align: left;\">driver.find_element_by_xpath(&quot;//*[@id=&#39;login&#39;]/input[1]&quot;).send_keys(&quot;161003530106&quot;)</p><p style=\"text-align: left;\">driver.find_element_by_xpath(&quot;//*[@id=&#39;login&#39;]/input[2]&quot;).send_keys(&quot;密码不能告诉你们&quot;)</p><p style=\"text-align: left;\">driver.find_element_by_xpath(&quot;//*[@id=&#39;login&#39;]/a&quot;).click()</p><p style=\"text-align: left;\">print(&quot;跳转后handle&quot;)</p><p style=\"text-align: left;\">print(driver.current_window_handle)</p><p style=\"text-align: left;\">print(&quot;跳转后全部hanle&quot;)</p><p style=\"text-align: left;\">print(driver.window_handles)</p><p style=\"text-align: left;\">driver.implicitly_wait(10)</p><p style=\"text-align: left;\">xuanke = driver.find_element_by_xpath(&quot;//*[@id=&#39;nav&#39;]/li[5]/a&quot;)</p><p style=\"text-align: left;\">webdriver.ActionChains(driver).move_to_element(xuanke).perform()</p><p style=\"text-align: left;\">WebDriverWait(driver, 10).until(lambda driver: driver.find_element_by_xpath(&quot;//*[@id=&#39;nav&#39;]/li[5]/ul/li[1]/a&quot;).is_displayed())</p><p style=\"text-align: left;\">driver.find_element_by_xpath(&quot;//*[@id=&#39;nav&#39;]/li[5]/ul/li[1]/a&quot;).click()</p><p style=\"text-align: left;\">driver.switch_to_window(driver.current_window_handle)</p><p style=\"text-align: left;\">driver.find_element_by_xpath(&quot;/html/body/div/div[2]/div[3]/div[5]/div/table/tbody/tr[11]/td[6]/button&quot;).click()</p><p style=\"text-align: left;\">遇到的一些问题:</p><p style=\"text-align: left;\">&nbsp; &nbsp; 问题1： 页面跳转后再查找东西时报下面的错误</p><p style=\"text-align: left;\">NoSuchElementException: Message: Unable to locate element</p><p style=\"text-align: left;\">原因： handle发生了变化</p><p style=\"text-align: left;\">解决方法：</p><p style=\"text-align: left;\">driver.switch_to_window(driver.currenHandle)</p><p style=\"text-align: left;\">问题2： 怎么查找下拉菜单的元素</p><p style=\"text-align: left;\">解决方法： 使用ActionChains类</p><p style=\"text-align: left;\">webdriver.ActionChains(driver).move_to_element(xuanke).perform()</p><p style=\"text-align: left;\">问题3： 查找下拉列表时， handle没变化， 查找元素时， 报错元素不可见</p><p style=\"text-align: left;\">原因： 页面还没加载出来你就查找， 肯定找不到</p><p style=\"text-align: left;\">解决方法：</p><p><br/></p><p style=\"text-align: left;\">WebDriverWait(driver, 10).until(lambda driver: driver.find_element_by_xpath(&quot;//*[@id=&#39;nav&#39;]/li[5]/ul/li[1]/a&quot;).is_displayed())</p><p style=\"text-align: left;\">每10 秒刷新一下， 让它加载完毕</p><p><br/></p><p style=\"text-align: left;\"><span style=\"background-color: rgb(255, 0, 0); font-size: 20px;\">2019-4-26 14:41学校的官网进行了更新，不知道还能不能行，没试过，只要更改xpath值就行</span><br/></p><p><br/></p>',0,0,0,1,1,0,'2019-03-25  20:43:42','2019-03-25  20:43:42',0),(50,1,'selenium','利用python找不同','<p>from PIL</p><p>import Image, ImageChops</p><p>image1 = Image.open(&quot;C:/Users/wantao/Desktop/qq截图/python/33.png&quot;)</p><p>image2 = Image.open(&quot;C:/Users/wantao/Desktop/qq截图/python/44.png&quot;)</p><p>difference = ImageChops.difference(image1, image2)</p><p><br/></p><p>if difference.getbbox() == None:</p><p>&nbsp; &nbsp; print(&quot;我们都一样&quot;)</p><p>else :</p><p>&nbsp; &nbsp; difference.save(&quot;C:/Users/wantao/Desktop/qq截图/python/differnce.png&quot;)</p><p><br/></p>',0,0,0,1,1,0,'2019-03-25  21:09:44','2019-03-25  21:09:44',0),(51,1,'selenium','利用pymysql进行crud','<p><br/></p><p style=\"line-height: normal;\">import pymysql</p><p style=\"line-height: normal;\">db = pymysql.connect(host = &#39;localhost&#39;, user = &#39;root&#39;, passwd = &#39;xxxxxx&#39;, db = &#39;pymysql&#39;, port = 3306)</p><p style=\"line-height: normal;\">def select_one():</p><p style=\"line-height: normal;\">sql = &#39;select * from tb_user&#39;</p><p style=\"line-height: normal;\">cursor = db.cursor()</p><p style=\"line-height: normal;\">cursor.execute(sql)</p><p style=\"line-height: normal;\">data = cursor.fetchone()</p><p style=\"line-height: normal;\">return data</p><p><br/></p><p><br/></p><p style=\"line-height: normal;\">def select_by_id(id):</p><p style=\"line-height: normal;\">sql = &#39;select * from tb_user where id=%d&#39; % id</p><p style=\"line-height: normal;\">cursor = db.cursor()</p><p style=\"line-height: normal;\">cursor.execute(sql)</p><p style=\"line-height: normal;\">data = cursor.fetchone()</p><p style=\"line-height: normal;\">return data</p><p><br/></p><p><br/></p><p style=\"line-height: normal;\">def select_all():</p><p style=\"line-height: normal;\">sql = &#39;select * from tb_user&#39;</p><p style=\"line-height: normal;\">cursor = db.cursor()</p><p style=\"line-height: normal;\">cursor.execute(sql)</p><p style=\"line-height: normal;\">datas = cursor.fetchall()</p><p style=\"line-height: normal;\">return datas</p><p><br/></p><p><br/></p><p style=\"line-height: normal;\">def delete_one(id):</p><p style=\"line-height: normal;\">sql = &#39;delete from tb_user where id=%d&#39; % id</p><p style=\"line-height: normal;\">cursor = db.cursor()</p><p style=\"line-height: normal;\">cursor.execute(sql)</p><p><br/></p><p><br/></p><p style=\"line-height: normal;\">def insert_one():</p><p style=\"line-height: normal;\">sql = &#39;insert into tb_user(id,name,age) values(2,&quot;wanchao&quot;,18)&#39;</p><p style=\"line-height: normal;\">cursor = db.cursor()</p><p style=\"line-height: normal;\">cursor.execute(sql)</p><p><br/></p><p><br/></p><p style=\"line-height: normal;\">def update():</p><p style=\"line-height: normal;\">sql = &#39;update tb_user set name=&quot;gaohan&quot; where name=&quot;wanchao&quot;&#39;</p><p style=\"line-height: normal;\">cursor = db.cursor()</p><p style=\"line-height: normal;\">cursor.execute(sql)</p><p><br/></p><p><br/></p><p style=\"line-height: normal;\">if __name__ == &#39;__main__&#39;:</p><p style=\"line-height: normal;\">print(&#39;查询一条语句:{}&#39;.format(select_one()))</p><p style=\"line-height: normal;\">print(&#39;按id查询一条语句:{}&#39;.format(select_by_id(2)))</p><p style=\"line-height: normal;\">print(&#39;查询多条语句：&#39;)</p><p style=\"line-height: normal;\">[print(data) for data in select_all()]</p><p style=\"line-height: normal;\">print(&#39;删除：&#39;)</p><p style=\"line-height: normal;\">delete_one(2)</p><p style=\"line-height: normal;\">[print(data) for data in select_all()]</p><p style=\"line-height: normal;\">print(&#39;添加&#39;)</p><p style=\"line-height: normal;\">insert_one()</p><p style=\"line-height: normal;\">[print(data) for data in select_all()]</p><p style=\"line-height: normal;\">print(&#39;修改:&#39;)</p><p style=\"line-height: normal;\">update()</p><p style=\"line-height: normal;\">[print(data) for data in select_all()]</p><p><br/></p>',0,0,0,1,1,0,'2019-03-25  21:12:42','2019-03-25  21:12:42',0),(54,1,'selenium','顺序表','<p>#include&lt;stdio.h&gt;</p><p>#include&lt;string.h&gt;</p><p>#include&lt;malloc.h&gt;</p><p>#include&lt;stdlib.h&gt;</p><p>#define Max_SeqList 10</p><p>&nbsp;typedef struct&nbsp;</p><p>{</p><p><span style=\"white-space:pre\">	</span>int num;</p><p>}</p><p>Student;</p><p>typedef struct&nbsp;</p><p>{</p><p><span style=\"white-space:pre\">	</span>Student * date;</p><p><span style=\"white-space:pre\">	</span>int Length;</p><p><span style=\"white-space:pre\">	</span>int ListLength;</p><p>}</p><p>SeqList;</p><p>void InitList(SeqList* L)&nbsp;</p><p>{</p><p><span style=\"white-space:pre\">	</span>//1.初始化顺序表</p><p><span style=\"white-space:pre\">	</span>L-&gt;date=(Student *)malloc(Max_SeqList*sizeof(Student));</p><p><span style=\"white-space:pre\">	</span>if(!L-&gt;date)</p><p><span style=\"white-space:pre\">	</span>&nbsp; printf(&quot;内存分配失败n&quot;);</p><p>&nbsp; L-&gt;Length=0;</p><p>&nbsp; L-&gt;ListLength=Max_SeqList;</p><p>&nbsp; printf(&quot;顺序表创建成功n&quot;);</p><p>&nbsp;}</p><p>&nbsp;void ClearList(SeqList *L){//2.清空顺序表</p><p>&nbsp; L-&gt;Length=0;</p><p>&nbsp; &nbsp; L-&gt;ListLength=0;</p><p>&nbsp; printf(&quot;顺序表清除成功&quot;);</p><p>&nbsp;}</p><p>&nbsp;int isEmpty(SeqList *L){//3.判断顺序表是否为空</p><p>&nbsp; if(L-&gt;Length==0) return 0;</p><p>&nbsp;else</p><p>&nbsp; return 1;</p><p>}</p><p>&nbsp;int LengthList(SeqList *L){//4.顺序表的长度</p><p>&nbsp;return L-&gt;ListLength;</p><p>}</p><p>&nbsp; &nbsp; void TraverseList(SeqList *L){//5.遍历顺序表</p><p>&nbsp;int i;</p><p>&nbsp; for(i=0;i&lt;L-&gt;Length;i++)</p><p>&nbsp; &nbsp;printf(&quot;号码为:%dt&quot;,L-&gt;date[i]);</p><p>&nbsp;}</p><p>&nbsp;void InsertList(SeqList *L,int i,int e){//6.插入元素</p><p>&nbsp; int k;</p><p>&nbsp; if(L-&gt;Length==Max_SeqList) printf(&quot;顺序表已经满了&quot;);</p><p>&nbsp; if(i&lt;1||i&gt;L-&gt;Length+1) printf(&quot;插入位置无效&quot;);</p><p>&nbsp; for(k=L-&gt;Length-1;k&gt;=i-1;k--)</p><p>&nbsp; &nbsp;L-&gt;date[k+1]=L-&gt;date[k];</p><p>&nbsp; &nbsp; &nbsp; L-&gt;date[i-1].num=e;</p><p>&nbsp; &nbsp;L-&gt;Length++;</p><p>&nbsp; &nbsp;printf(&quot;插入完成&quot;);</p><p>&nbsp;}</p><p>&nbsp;void DeleteList (SeqList *L,int i){//7.删除元素</p><p>&nbsp; &nbsp;int k;</p><p>&nbsp; if(L-&gt;Length==0) printf(&quot;顺序表已经满了&quot;);</p><p>&nbsp; if(i&lt;1||i&gt;L-&gt;Length+1) printf(&quot;删除位置无效&quot;);</p><p>&nbsp; //*e=L-&gt;date[i-1].num;</p><p>&nbsp; for(k=i;k&lt;=L-&gt;Length;k++){</p><p>&nbsp; &nbsp; &nbsp;L-&gt;date[k-1]=L-&gt;date[k];</p><p>&nbsp; &nbsp;L-&gt;Length--;</p><p>&nbsp; }</p><p>}</p><p>&nbsp;void LocateList(int e, SeqList *L){//8.查找元素</p><p>&nbsp; &nbsp;int i=0;</p><p>&nbsp; &nbsp;while(i&lt;L-&gt;Length&amp;&amp;L-&gt;date[i].num!=e)</p><p>&nbsp; &nbsp;i++;</p><p>&nbsp; if(i&lt;L-&gt;Length)</p><p>&nbsp; &nbsp;printf(&quot;找到了，位置在%d&quot;,i+1);</p><p>&nbsp; else</p><p>&nbsp; &nbsp;printf(&quot;找不到&quot;);</p><p>}</p><p>int main(){</p><p>&nbsp; &nbsp; int choice;</p><p>&nbsp;int m=0;</p><p>&nbsp; &nbsp; int n=0;</p><p>&nbsp;int z=0;</p><p>&nbsp;int j=0;</p><p>&nbsp;SeqList *List;</p><p>&nbsp;List=(SeqList*)malloc(sizeof(SeqList));</p><p>&nbsp; &nbsp; while(1){</p><p>&nbsp; printf(&quot;------------TEST------------n&quot;);</p><p>&nbsp; printf(&quot;1.初始化表n2.清空顺序表n3.判断顺序表是否为空n4.顺序表的长度n5.遍历顺序表n6.插入元素n7.删除元素n8.查找元素&quot;);</p><p>&nbsp; printf(&quot;请选择:&quot;);</p><p>&nbsp; scanf(&quot;%d&quot;,&amp;choice);</p><p>&nbsp; switch(choice){</p><p>&nbsp; &nbsp; &nbsp; case 1:&nbsp;</p><p>&nbsp; &nbsp; &nbsp;InitList(List);</p><p>&nbsp; &nbsp; break;</p><p>&nbsp; &nbsp; &nbsp; case 2:ClearList(List);break;</p><p>&nbsp; &nbsp;case 3:</p><p>&nbsp; &nbsp; if(isEmpty(List))</p><p>&nbsp; &nbsp; printf(&quot;表不为空n&quot;);</p><p>&nbsp; &nbsp; else</p><p>&nbsp; &nbsp; printf(&quot;表为空n&quot;);</p><p>&nbsp; &nbsp; break;</p><p>&nbsp; &nbsp;case 4:printf(&quot;表的长度为%d&quot;,LengthList(List)); break;</p><p>&nbsp; &nbsp;case 5: TraverseList(List); break;</p><p>&nbsp; &nbsp;case 6:&nbsp;</p><p>&nbsp; &nbsp; printf(&quot;输入插入位置n&quot;);&nbsp;</p><p>&nbsp; &nbsp; scanf(&quot;%d&quot;,&amp;m);</p><p>&nbsp; &nbsp; printf(&quot;输入插入值n&quot;);&nbsp;</p><p>&nbsp; &nbsp; scanf(&quot;%d&quot;,&amp;n);</p><p>&nbsp; &nbsp; &nbsp; &nbsp;InsertList(List,m,n);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break;</p><p>&nbsp; &nbsp;case 7:</p><p>&nbsp; &nbsp; printf(&quot;输入你要删除的元素位置:n&quot;);</p><p>&nbsp; &nbsp; scanf(&quot;%d&quot;,&amp;z);</p><p>&nbsp; &nbsp; DeleteList (List,z);</p><p>&nbsp; &nbsp; printf(&quot;元素已删除&quot;);</p><p>&nbsp; &nbsp; break;</p><p>&nbsp; &nbsp;case 8:</p><p>&nbsp; &nbsp; printf(&quot;请输入你要查找的元素:&quot;);</p><p>&nbsp; &nbsp; scanf(&quot;%d&quot;,&amp;j);</p><p>&nbsp; &nbsp; &nbsp;LocateList(j, List);</p><p>&nbsp; &nbsp; break;</p><p>&nbsp; }</p><p>&nbsp;}</p><p>&nbsp;return 0;</p><p>}</p><p><br/></p>',0,0,0,1,1,0,'2019-03-25  21:22:57','2019-03-25  21:22:57',0),(58,1,'selenium','顺序栈','<p>#include&lt;stdio.h&gt;</p><p>#include&lt;stdlib.h&gt;</p><p>#define stack_initSize 100</p><p>#define stack_incrementSize 10</p><p>typedef struct&nbsp;</p><p>{</p><p><span style=\"white-space:pre\">	</span>int * stackdata;</p><p><span style=\"white-space:pre\">	</span>int top;</p><p><span style=\"white-space:pre\">	</span>int stacksize;</p><p>}</p><p>seqStack;</p><p>void InitStack(seqStack *S)&nbsp;</p><p>{</p><p><span style=\"white-space:pre\">	</span>//初始化栈</p><p><span style=\"white-space:pre\">	</span>if(!S)&nbsp;</p><p><span style=\"white-space:pre\">	</span>{</p><p><span style=\"white-space:pre\">		</span>printf(&quot;顺序栈无效n&quot;); return;}</p><p>&nbsp; S-&gt;stackdata=(int *)malloc(stack_initSize*sizeof(int));</p><p>&nbsp; &nbsp; &nbsp;S-&gt;top=0;</p><p>&nbsp; S-&gt;stacksize=stack_initSize;</p><p>&nbsp; &nbsp; &nbsp;}</p><p>&nbsp;void InStack(seqStack * S,int e){//进栈</p><p>&nbsp; int * newstack;</p><p>&nbsp; if(!S)&nbsp; {printf(&quot;顺序栈无效n&quot;); return;}</p><p>&nbsp; &nbsp;if(S-&gt;top==S-&gt;stacksize){</p><p>&nbsp; &nbsp; &nbsp;newstack=(int*)realloc(S-&gt;stackdata,(S-&gt;stacksize+stack_incrementSize)*sizeof(int));</p><p>&nbsp; &nbsp; &nbsp;if(!newstack) { printf(&quot;内存分配错误n&quot;);return;}</p><p>&nbsp; &nbsp; &nbsp;S-&gt;stackdata=newstack;</p><p>&nbsp; &nbsp; &nbsp;S-&gt;stacksize=S-&gt;stacksize+stack_incrementSize;</p><p>&nbsp; &nbsp;}</p><p>&nbsp; &nbsp;S-&gt;stackdata[S-&gt;top++]=e;</p><p>&nbsp;}&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</p><p>&nbsp;void OutStack(seqStack *S){//出栈</p><p>&nbsp; &nbsp; int e;</p><p>&nbsp; &nbsp; &nbsp; &nbsp;if(!S)&nbsp; {printf(&quot;顺序栈无效n&quot;); return;}</p><p>&nbsp; &nbsp; if(S-&gt;top==0) {printf(&quot;栈为空n&quot;); return;}</p><p>&nbsp; &nbsp; e=S-&gt;stackdata[--S-&gt;top];</p><p>&nbsp; &nbsp; printf(&quot;%d&quot;,e);</p><p>}</p><p>&nbsp;void TraversalStack(seqStack * S){//遍历栈</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;int i;</p><p>&nbsp; &nbsp; &nbsp; for(i=0;i&lt;S-&gt;top;i++){</p><p>&nbsp; &nbsp; &nbsp; &nbsp;printf(&quot;%dt&quot;,S-&gt;stackdata[i]);</p><p>&nbsp; &nbsp; &nbsp; }</p><p>&nbsp; &nbsp; &nbsp; printf(&quot;n&quot;);</p><p>&nbsp; &nbsp; }</p><p>&nbsp;void LengthStack(seqStack *S){//栈长</p><p>&nbsp; printf(&quot;栈的长度为%dn&quot;,S-&gt;top);</p><p>&nbsp;}</p><p>&nbsp; &nbsp; void IsEmpty(seqStack *S){//判断是否为空</p><p>&nbsp; if(!S)&nbsp; {printf(&quot;顺序栈无效n&quot;); return;}</p><p>&nbsp; &nbsp; &nbsp;if(S-&gt;top==0) printf(&quot;栈为空n&quot;);</p><p>&nbsp; else</p><p>&nbsp; &nbsp;printf(&quot;栈不为空n&quot;);</p><p>}</p><p>&nbsp; int main(void){</p><p>&nbsp; &nbsp;seqStack *S=(seqStack*)malloc(sizeof(seqStack));</p><p>&nbsp; &nbsp;int i,x,z;</p><p>&nbsp; &nbsp;int y=1;</p><p>&nbsp; &nbsp;while(y){</p><p>&nbsp; &nbsp; &nbsp; &nbsp;printf(&quot;***********************n&quot;);</p><p>&nbsp; &nbsp; printf(&quot;--1.初始化栈--n&quot;);</p><p>&nbsp; &nbsp; printf(&quot;--2.进栈--n&quot;);</p><p>&nbsp; &nbsp; printf(&quot;--3.出栈--n&quot;);</p><p>&nbsp; &nbsp; printf(&quot;--4.遍历栈--n&quot;);</p><p>&nbsp; &nbsp; printf(&quot;--5.求栈长--n&quot;);</p><p>&nbsp; &nbsp; &nbsp; &nbsp;printf(&quot;--6.栈是否为空--n&quot;);</p><p>&nbsp; &nbsp; printf(&quot;--7.进制转换--n&quot;);</p><p>&nbsp; &nbsp; printf(&quot;--8.退出--n&quot;);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; printf(&quot;--请选择你要进行的操作--n&quot;);</p><p>&nbsp; &nbsp; scanf(&quot;%d&quot;,&amp;i);</p><p>&nbsp; &nbsp; switch(i){</p><p>&nbsp; &nbsp; case 1:InitStack(S);printf(&quot;栈已经初始化n&quot;);break;</p><p>&nbsp; &nbsp; case 2: printf(&quot;请输入你要进栈的元素n&quot;);scanf(&quot;%d&quot;,&amp;x);InStack(S,x);printf(&quot;%d已经进栈n&quot;,x);break;</p><p>&nbsp; &nbsp; case 3: OutStack(S); printf(&quot;n已经出栈n&quot;);break;</p><p>&nbsp; &nbsp; case 4: TraversalStack(S);break;</p><p>&nbsp; &nbsp; case 5: LengthStack(S);break;</p><p>&nbsp; &nbsp; case 6: IsEmpty(S);break;</p><p>&nbsp; &nbsp; case 7:</p><p>&nbsp; &nbsp; &nbsp;printf(&quot;请输入你要转换的10进制数:n&quot;);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;scanf(&quot;%d&quot;,&amp;z);</p><p>&nbsp; &nbsp; &nbsp; InitStack(S);</p><p>&nbsp; &nbsp; &nbsp; while(z){</p><p>&nbsp; &nbsp; &nbsp; InStack(S,z%2);</p><p>&nbsp; &nbsp; &nbsp; z=z/2;</p><p>&nbsp; &nbsp; &nbsp; }</p><p>&nbsp; &nbsp; &nbsp; printf(&quot;转换结果为:n&quot;);</p><p>&nbsp; &nbsp; &nbsp; while(S-&gt;top!=0){</p><p>&nbsp; &nbsp; &nbsp; OutStack(S);</p><p>&nbsp; &nbsp; &nbsp; }</p><p>&nbsp; &nbsp; &nbsp; printf(&quot;n&quot;);</p><p>&nbsp; &nbsp; &nbsp;break;</p><p>&nbsp; &nbsp; case 8: y=0;printf(&quot;已退出n&quot;);break;</p><p>&nbsp; &nbsp;}</p><p>&nbsp; &nbsp;}</p><p>&nbsp; return 0;</p><p><br/></p>',0,0,0,1,1,0,'2019-03-25  21:26:30','2019-03-25  21:26:30',0),(59,1,'selenium','顺序队列','<p>#include&lt;stdio.h&gt;</p><p>#include&lt;stdlib.h&gt;</p><p>#define MAX_SIZE 100</p><p>typedef struct&nbsp;</p><p>{</p><p><span style=\"white-space:pre\">	</span>int data[MAX_SIZE];</p><p><span style=\"white-space:pre\">	</span>int front;</p><p><span style=\"white-space:pre\">	</span>int rear;</p><p>}</p><p>SeqQueue;</p><p>void InitQueue(SeqQueue *Q)&nbsp;</p><p>{</p><p><span style=\"white-space:pre\">	</span>//初始化队列</p><p><span style=\"white-space:pre\">	</span>if(!Q)&nbsp;</p><p><span style=\"white-space:pre\">	</span>{</p><p><span style=\"white-space:pre\">		</span>printf(&quot;内存分配错误n&quot;); return;}</p><p>&nbsp;Q-&gt;front=0;</p><p>&nbsp;Q-&gt;rear=0;</p><p>&nbsp;printf(&quot;初始化完毕n&quot;);</p><p>}</p><p>void InQueue(SeqQueue *Q,int e){//进队列</p><p>&nbsp; &nbsp; int pos=(Q-&gt;rear+1)%MAX_SIZE;</p><p>&nbsp;if(!Q){printf(&quot;内存分配错误n&quot;); return;}</p><p>&nbsp; &nbsp; if(pos==Q-&gt;front){</p><p>&nbsp;printf(&quot;内存已经满了n&quot;);</p><p>&nbsp;return;</p><p>&nbsp;}</p><p>&nbsp;Q-&gt;data[Q-&gt;rear]=e;</p><p>&nbsp;Q-&gt;rear=pos;</p><p>&nbsp;printf(&quot;%d已经入队n&quot;,e);</p><p>}</p><p>void OutQueue(SeqQueue *Q){//出队列</p><p>&nbsp; &nbsp;int e;</p><p>&nbsp; &nbsp;if(!Q){printf(&quot;内存分配错误n&quot;); return;}</p><p>&nbsp; &nbsp;if(Q-&gt;front==Q-&gt;rear){printf(&quot;队列为空n&quot;);return;}</p><p>&nbsp; &nbsp;e=Q-&gt;data[Q-&gt;front];</p><p>&nbsp; &nbsp;Q-&gt;front=(Q-&gt;front+1)%MAX_SIZE;</p><p>&nbsp; &nbsp;printf(&quot;%d已经出队n&quot;,e);</p><p>}</p><p>void IsEmpty(SeqQueue *Q){//是否为空</p><p>&nbsp;if(!Q){printf(&quot;内存分配错误n&quot;); return;}&nbsp;&nbsp;</p><p>&nbsp;if(Q-&gt;rear==Q-&gt;front){printf(&quot;队列为空n&quot;);}&nbsp;</p><p>&nbsp;printf(&quot;队列不为空n&quot;);</p><p>&nbsp;}</p><p>&nbsp;void LengthQueue(SeqQueue *Q){//队列长度</p><p>&nbsp; &nbsp; &nbsp; int length;</p><p>&nbsp; &nbsp;length=((Q-&gt;rear-Q-&gt;front+MAX_SIZE)%MAX_SIZE);</p><p>&nbsp; &nbsp;printf(&quot;队列的长度为:%dn&quot;,length);</p><p>&nbsp;}</p><p>&nbsp;void TraversalQueue(SeqQueue *Q){//遍历队列</p><p>&nbsp; int i;</p><p>&nbsp; int p=Q-&gt;front;</p><p>&nbsp; &nbsp;if(!Q){printf(&quot;内存分配错误n&quot;); return;}</p><p>&nbsp; &nbsp;if(Q-&gt;front==Q-&gt;rear){printf(&quot;队列为空n&quot;);return;}</p><p>&nbsp; &nbsp;for(i=Q-&gt;front;i&lt;Q-&gt;rear;i++){</p><p>&nbsp; &nbsp; printf(&quot;%dt&quot;,Q-&gt;data[p]);</p><p>&nbsp; &nbsp; p++;</p><p>&nbsp; &nbsp;}</p><p>&nbsp; &nbsp;printf(&quot;n&quot;);</p><p>&nbsp;}</p><p>&nbsp;int main(void){</p><p>&nbsp; SeqQueue* Q=(SeqQueue*)malloc(sizeof(SeqQueue));</p><p>&nbsp; int n,a;</p><p>&nbsp; int y=1;</p><p>&nbsp; while(y){</p><p>&nbsp; &nbsp;printf(&quot;***********************n&quot;);</p><p>&nbsp; &nbsp; printf(&quot;--1.初始化队列--n&quot;);</p><p>&nbsp; &nbsp; printf(&quot;--2.进队--n&quot;);</p><p>&nbsp; &nbsp; printf(&quot;--3.出队--n&quot;);</p><p>&nbsp; &nbsp; printf(&quot;--4.遍历队--n&quot;);</p><p>&nbsp; &nbsp; printf(&quot;--5.求队长--n&quot;);</p><p>&nbsp; &nbsp; &nbsp; &nbsp;printf(&quot;--6.队是否为空--n&quot;);</p><p>&nbsp; &nbsp; printf(&quot;--7.退出--n&quot;);</p><p>&nbsp; &nbsp; printf(&quot;请输入你要进行的操作:n&quot;);</p><p>&nbsp; &nbsp; scanf(&quot;%d&quot;,&amp;n);</p><p>&nbsp; &nbsp; &nbsp;switch(n){</p><p>&nbsp; &nbsp; case 1: InitQueue(Q);&nbsp; &nbsp;break;</p><p>&nbsp; &nbsp; case 2: printf(&quot;请输入你要进队的数:n&quot;);scanf(&quot;%d&quot;,&amp;a);InQueue(Q,a); break;</p><p>&nbsp; &nbsp; case 3: OutQueue(Q); break;</p><p>&nbsp; &nbsp; case 4: TraversalQueue(Q); break;</p><p>&nbsp; &nbsp; case 5: LengthQueue(Q); break;</p><p>&nbsp; &nbsp; case 6: IsEmpty(Q); break;</p><p>&nbsp; &nbsp; case 7:&nbsp; y=0;break;</p><p>&nbsp; &nbsp; }</p><p>&nbsp; }</p><p>&nbsp; return 0;</p><p>&nbsp;}</p><p><br/></p>',0,0,0,1,1,0,'2019-03-25  21:27:48','2019-03-25  21:27:48',0),(57,1,'selenium','链表','<p>#include &lt;stdio.h&gt;</p><p>#include &lt;string.h&gt;</p><p>#include &lt;stdlib.h&gt;</p><p>static struct stuNode *head=NULL;</p><p>struct stuNode&nbsp;</p><p>{</p><p><span style=\"white-space:pre\">	</span>char&nbsp; num[16];</p><p><span style=\"white-space:pre\">	</span>char&nbsp; name[8];</p><p><span style=\"white-space:pre\">	</span>char&nbsp; age[4];</p><p><span style=\"white-space:pre\">	</span>struct stuNode *next;</p><p>}</p><p>;</p><p>struct stuNode *CreateList( int n )&nbsp;</p><p>/* 1.创建链表 */&nbsp;</p><p>{</p><p><span style=\"white-space:pre\">	</span>struct stuNode *pb, *pf;</p><p><span style=\"white-space:pre\">	</span>int&nbsp; i;</p><p><span style=\"white-space:pre\">	</span>int count=1;</p><p><span style=\"white-space:pre\">	</span>for ( i = 0; i &lt; n; i++ )&nbsp;</p><p><span style=\"white-space:pre\">	</span>{</p><p><span style=\"white-space:pre\">		</span>pb = (struct stuNode *) malloc( sizeof(struct stuNode) );</p><p><span style=\"white-space:pre\">		</span>fflush(stdin);</p><p><span style=\"white-space:pre\">		</span>//记得清空缓存区，这个很重要</p><p><span style=\"white-space:pre\">		</span>printf( &quot;请输入第%d个学生的学号:n&quot;,count );</p><p>&nbsp; gets(pb-&gt;num);</p><p>&nbsp; printf( &quot;请输入学生的姓名:n&quot; );</p><p>&nbsp; gets(pb-&gt;name);</p><p>&nbsp; printf( &quot;请输入学生的年龄:n&quot; );</p><p>&nbsp; &nbsp; &nbsp;gets(pb-&gt;age);</p><p>&nbsp; count++;</p><p>&nbsp; pb-&gt;next = NULL;</p><p>&nbsp; if ( i == 0 )</p><p>&nbsp; &nbsp;head = pb;</p><p>&nbsp; else</p><p>&nbsp; &nbsp;pf-&gt;next = pb;</p><p>&nbsp; pf = pb;</p><p>&nbsp;}</p><p>&nbsp;printf( &quot;表已创建完毕n&quot; );</p><p>&nbsp;return(head);</p><p>}</p><p>void TraversalList( struct stuNode *h ) /* 2.遍历链表 */</p><p>{</p><p>&nbsp;struct stuNode *p;</p><p>&nbsp;p = h;</p><p>&nbsp;if ( p == NULL )</p><p>&nbsp; printf( &quot;表为空n&quot; );</p><p>&nbsp;else{</p><p>&nbsp; printf( &quot;学号tt姓名t年龄tn&quot; );</p><p>&nbsp; while ( p )</p><p>&nbsp; {</p><p>&nbsp; &nbsp;printf( &quot;%st%st%stn&quot;, p-&gt;num, p-&gt;name, p-&gt;age );</p><p>&nbsp; &nbsp;p = p-&gt;next;</p><p>&nbsp; }</p><p>&nbsp;}</p><p>}</p><p>struct stuNode * InsertList(struct stuNode *h,char *pnum){//3.插入学生</p><p>&nbsp; struct stuNode *pa,*pb;</p><p>&nbsp; pa=h;</p><p>&nbsp; if(!strcmp(pa-&gt;num,pnum)){</p><p>&nbsp; pb=(struct stuNode *)malloc(sizeof(struct stuNode));</p><p>&nbsp; fflush(stdin);</p><p>&nbsp; printf(&quot;请输入待插入学生的信息:n&quot;);</p><p>&nbsp; printf(&quot;请输入学生的学号:n&quot;);</p><p>&nbsp; gets(pb-&gt;num);</p><p>&nbsp; printf(&quot;请输入学生的姓名:n&quot;);</p><p>&nbsp; gets(pb-&gt;name);</p><p>&nbsp; printf(&quot;请输入学生的年龄:n&quot;);</p><p>&nbsp; scanf(&quot;%d&quot;,&amp;(pb-&gt;age));</p><p>&nbsp; printf(&quot;插入学生信息完成&quot;);</p><p>&nbsp; pb-&gt;next=pa;</p><p>&nbsp; return pb;</p><p>&nbsp; }</p><p>&nbsp; else{</p><p>&nbsp;while(pa-&gt;next!=NULL){</p><p>&nbsp; &nbsp;if(!strcmp(pa-&gt;next-&gt;num,pnum)){</p><p>&nbsp; &nbsp;pb=(struct stuNode *)malloc(sizeof(struct stuNode));</p><p>&nbsp; &nbsp;fflush(stdin);</p><p>&nbsp; &nbsp;printf(&quot;请输入待插入学生的信息n&quot;);</p><p>&nbsp; &nbsp;printf(&quot;请输入学生的学号:n&quot;);</p><p>&nbsp; &nbsp;gets(pb-&gt;num);</p><p>&nbsp; printf(&quot;请输入学生的姓名:n&quot;);</p><p>&nbsp; &nbsp;gets(pb-&gt;name);</p><p>&nbsp; &nbsp;printf(&quot;请输入学生的年龄:n&quot;);</p><p>&nbsp; &nbsp;scanf(&quot;%s&quot;,pb-&gt;age);</p><p>&nbsp; &nbsp;printf(&quot;插入学生信息完成n&quot;);</p><p>&nbsp; &nbsp;pb-&gt;next=pa-&gt;next;</p><p>&nbsp; &nbsp;pa-&gt;next=pb;</p><p>&nbsp; &nbsp;return h;</p><p>&nbsp; &nbsp;}</p><p>&nbsp; &nbsp;else</p><p>&nbsp; &nbsp;pa=pa-&gt;next;</p><p>&nbsp; }</p><p>&nbsp; printf(&quot;未找到插入位置:n&quot;);</p><p>&nbsp; return h;</p><p>&nbsp; }</p><p>&nbsp; }</p><p>&nbsp;struct stuNode *DeleteList(struct stuNode *h,char *pnum){//4.删除学生</p><p>&nbsp; struct stuNode * pa,*pb;</p><p>&nbsp; pa=h;</p><p>&nbsp; if(!strcmp(pa-&gt;num,pnum)){//删除的是第一个节点</p><p>&nbsp; &nbsp; &nbsp;h=pa-&gt;next;</p><p>&nbsp; &nbsp;free(pa);</p><p>&nbsp; &nbsp;return h;</p><p>&nbsp; &nbsp; printf(&quot;学生已删除:n&quot;);</p><p>}</p><p>&nbsp; else{</p><p>&nbsp; while(pa-&gt;next!=NULL){</p><p>&nbsp; &nbsp;if(strcmp(pa-&gt;next-&gt;num,pnum)){</p><p>&nbsp; &nbsp;pb=pa-&gt;next;</p><p>&nbsp; &nbsp;pa-&gt;next=pb-&gt;next;</p><p>&nbsp; &nbsp;free(pb);</p><p>&nbsp; &nbsp;return h;</p><p>&nbsp; &nbsp;printf(&quot;学生已删除:n&quot;);</p><p>&nbsp; &nbsp;}</p><p>&nbsp; else</p><p>&nbsp; pa=pa-&gt;next;</p><p>&nbsp; }</p><p>&nbsp; &nbsp;printf(&quot;未找到删除的学生n&quot;);</p><p>&nbsp; &nbsp;return h;</p><p>&nbsp; }</p><p>&nbsp;}</p><p>void SearchList(struct stuNode *h,char *pname){//5.查找学生</p><p>&nbsp; struct stuNode *pa;</p><p>&nbsp; pa=h;</p><p>&nbsp; while(pa!=NULL){</p><p>&nbsp; if(!strcmp(pa-&gt;name,pname)){</p><p>&nbsp; printf(&quot;找到了n&quot;);</p><p>&nbsp; printf(&quot;学号:%s&nbsp; 姓名:%s&nbsp; 年龄:%sn &quot;,pa-&gt;num,pa-&gt;name,pa-&gt;age);</p><p>&nbsp; return ;</p><p>&nbsp; }</p><p>&nbsp; else</p><p>&nbsp;pa=pa-&gt;next;</p><p>&nbsp;}</p><p>&nbsp; printf(&quot;找不到姓名为%s的学生:n&quot;,pa-&gt;name);</p><p>&nbsp;}</p><p>void DestroyList(struct stuNode **ph){//6.摧毁链表</p><p>&nbsp; &nbsp; struct stuNode *p;</p><p>&nbsp; p=*ph;</p><p>&nbsp; while(p!=NULL){</p><p>&nbsp; *ph=p-&gt;next;</p><p>&nbsp; &nbsp;free(p);</p><p>&nbsp; p=*ph;</p><p>&nbsp;}</p><p>&nbsp;printf(&quot;链表已经全部摧毁n&quot;);</p><p>&nbsp; *ph=NULL;</p><p>&nbsp;}</p><p>&nbsp;int main()</p><p>&nbsp;{</p><p>&nbsp; while ( 1 )</p><p>&nbsp; {</p><p>&nbsp; &nbsp;int&nbsp; n, x;</p><p>&nbsp; &nbsp; char z[12];</p><p>&nbsp; &nbsp;char y[12];</p><p>&nbsp; &nbsp;char pname[8];</p><p>&nbsp; &nbsp;printf( &quot;----------------欢迎来到涛帝的学生管理系统-------------------n&quot; );</p><p>&nbsp; &nbsp;printf( &quot;1.建立链表n&quot; );</p><p>&nbsp; &nbsp;printf(&quot;2.查看所有学生信息n&quot;);</p><p>&nbsp; &nbsp;printf( &quot;3.插入学生n&quot; );</p><p>&nbsp; &nbsp;printf( &quot;4.删除学生n&quot; );</p><p>&nbsp; &nbsp;printf( &quot;5.查找学生n&quot; );</p><p>&nbsp; &nbsp;printf( &quot;6.摧毁链表n&quot; );</p><p>&nbsp; &nbsp;printf( &quot;请输入你要进行的操作:n&quot; );</p><p>&nbsp; &nbsp;scanf( &quot;%d&quot;, &amp;n );</p><p>&nbsp; &nbsp;switch ( n )</p><p>&nbsp; &nbsp;{</p><p>&nbsp; &nbsp;case 1:</p><p>&nbsp; &nbsp; printf( &quot;请输入你要录入的学生人数:n&quot; );</p><p>&nbsp; &nbsp; scanf( &quot;%d&quot;, &amp;x );</p><p>&nbsp; &nbsp; CreateList(x);</p><p>&nbsp; &nbsp; break;</p><p>&nbsp; &nbsp; &nbsp;case 2:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TraversalList( head );</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;case 3:</p><p>&nbsp; &nbsp; &nbsp;printf(&quot;请输入想要插入位置学生的学号:n&quot;);</p><p>&nbsp; &nbsp; &nbsp;scanf(&quot;%s&quot;,y);</p><p>&nbsp; &nbsp; &nbsp;InsertList(head,y);</p><p>&nbsp; &nbsp; &nbsp;break;</p><p>&nbsp; &nbsp; &nbsp;case 4:</p><p>&nbsp; &nbsp; &nbsp;printf(&quot;请输入想要删除学生的学号:n&quot;);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; scanf(&quot;%s&quot;,z);</p><p>&nbsp; &nbsp; &nbsp; &nbsp;DeleteList(head,z);</p><p>&nbsp; &nbsp; &nbsp;break;</p><p>&nbsp; &nbsp; case 5:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;printf(&quot;请输入想要查找学生的姓名:n&quot;);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; scanf(&quot;%s&quot;,pname);</p><p>&nbsp; &nbsp; &nbsp;SearchList(head,pname);</p><p>&nbsp; &nbsp;break;</p><p>&nbsp; &nbsp; case 6:</p><p>&nbsp; &nbsp; &nbsp;DestroyList(&amp;head);</p><p>&nbsp; &nbsp; &nbsp; break;</p><p>&nbsp; &nbsp;default: printf( &quot;老子要你输1，2,3,4,5,6 ntm瞎输什么输n&quot; ); break;</p><p>&nbsp; &nbsp;}</p><p>&nbsp; }</p><p>&nbsp;return 0;</p><p>&nbsp;}</p><p><br/></p>',0,0,0,1,1,0,'2019-03-25  21:25:19','2019-03-25  21:25:19',0),(60,1,'selenium','串','<p>#include&lt;stdio.h&gt;</p><p>#include&lt;stdlib.h&gt;</p><p>#define MAXLEN 100</p><p>typedef struct&nbsp;</p><p>{</p><p><span style=\"white-space:pre\">	</span>char * vec;</p><p><span style=\"white-space:pre\">	</span>int length;</p><p>}</p><p>str;</p><p>int StrLength(char* obj)&nbsp;</p><p>{</p><p><span style=\"white-space:pre\">	</span>//求串长</p><p><span style=\"white-space:pre\">	</span>int i=0,n=0;</p><p><span style=\"white-space:pre\">	</span>while(obj[i]!=&#39;&#39;){</p><p>&nbsp; &nbsp; &nbsp; &nbsp; i++;</p><p>&nbsp; &nbsp; &nbsp; n++;</p><p>&nbsp; &nbsp;}</p><p>return n;</p><p>}</p><p>void InitStr(str *obj1){//初始化串</p><p>&nbsp; &nbsp; &nbsp;obj1-&gt;vec=NULL;</p><p>&nbsp; &nbsp; &nbsp;obj1-&gt;length=0;</p><p>&nbsp; &nbsp; }</p><p>void CreateStr(str *obj1,char *obj2){//创建串</p><p>&nbsp; &nbsp; &nbsp; int i=0;</p><p>&nbsp; &nbsp; &nbsp; obj1-&gt;vec=(char *)malloc(StrLength(obj2)*sizeof(char));</p><p>&nbsp; &nbsp; &nbsp; for(i=0;i&lt;StrLength(obj2);i++){</p><p>&nbsp; &nbsp; &nbsp; &nbsp; obj1-&gt;vec[i]=obj2[i];</p><p>&nbsp; &nbsp; &nbsp; &nbsp; obj1-&gt;length++;</p><p>&nbsp; &nbsp; &nbsp; }</p><p>}</p><p>int FindStr(str *obj1,char *obj2,int pos){//查找子串位置</p><p>&nbsp; &nbsp; int i=pos,j=0;</p><p>&nbsp; &nbsp; if(pos&lt;0||pos&gt;obj1-&gt;length+1){</p><p>&nbsp; &nbsp; &nbsp; &nbsp; printf(&quot;输入有误&quot;);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return 0;</p><p>}</p><p>while(i&lt;=obj1-&gt;length-1&amp;&amp;j&lt;=StrLength(obj2)-1){</p><p>&nbsp; &nbsp; if(obj1-&gt;vec[i]==obj2[j]){</p><p>&nbsp; &nbsp; &nbsp; &nbsp; ++i;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; ++j;</p><p>&nbsp; &nbsp; }</p><p>&nbsp; &nbsp; else{</p><p>&nbsp; &nbsp; &nbsp; &nbsp; i=i-j+1;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; j=0;</p><p>&nbsp; &nbsp; }</p><p>}</p><p>if(j&gt;StrLength(obj2)-1){</p><p>&nbsp; &nbsp; return i-StrLength(obj2)+1;</p><p>}else</p><p>&nbsp; &nbsp; return 0;</p><p>}</p><p>void ShowStr(str *obj){//遍历结构体</p><p>&nbsp; &nbsp; int i=0;</p><p>&nbsp; for(i=0;i&lt;obj-&gt;length;i++){</p><p>&nbsp; &nbsp; printf(&quot;%c&quot;,obj-&gt;vec[i]);</p><p>&nbsp; }</p><p>&nbsp; printf(&quot;n&quot;);</p><p>}</p><p>void ShowStr2(char *obj){//遍历普通串</p><p>&nbsp; &nbsp; int i=0;</p><p>&nbsp;for(i=0;i&lt;StrLength(obj);i++){//</p><p>&nbsp; &nbsp; printf(&quot;%c&quot;,obj[i]);</p><p>&nbsp;}</p><p>&nbsp;printf(&quot;n&quot;);</p><p>}</p><p>void ReverseStr(str *obj1,char *obj2){//逆序</p><p>&nbsp; &nbsp; int i=0;</p><p>&nbsp; &nbsp; memcpy(obj2,obj1-&gt;vec,obj1-&gt;length*sizeof(char));</p><p>&nbsp; &nbsp; for(i=0;i&lt;obj1-&gt;length;i++){</p><p>&nbsp; &nbsp; &nbsp; &nbsp; obj1-&gt;vec[i]=obj2[obj1-&gt;length-1-i];</p><p>&nbsp; &nbsp; }</p><p>}</p><p>void ReplaceStr(str *obj1,char *obj2,char *obj3,int pos){//替换</p><p>&nbsp; &nbsp; int i;int n;int j;int k;int obj2_NextChar;int obj3_NextChar;</p><p>&nbsp; &nbsp; n=FindStr(obj1,obj2,pos);//查找到的位置</p><p>&nbsp; &nbsp; j=StrLength(obj2);</p><p>&nbsp; &nbsp; k=StrLength(obj3);</p><p>&nbsp; &nbsp; obj2_NextChar=n-1+j;//被替换的字符串的下一字符的数组下标</p><p>&nbsp; &nbsp; obj3_NextChar=n-1+k;//替换后字符的下一字符的数组下标</p><p>&nbsp; &nbsp; if(k&lt;=j){//替换的字符串比被替换的字符串短</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for(i=0;i&lt;k;i++){//先替换</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; obj1-&gt;vec[n-1+i]=obj3[i];</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for(i=0;i&lt;(obj1-&gt;length-(obj2_NextChar));i++){//然后前移</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;obj1-&gt;vec[obj3_NextChar+i]=obj1-&gt;vec[obj2_NextChar+i];</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; obj1-&gt;length-=(j-k);</p><p>&nbsp; &nbsp; }else{</p><p>&nbsp; &nbsp; for(i=0;i&lt;obj1-&gt;length-obj2_NextChar;i++){//先后移</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; obj1-&gt;vec[obj1-&gt;length-1-i+(k-j)]=obj1-&gt;vec[obj1-&gt;length-1-i];</p><p>&nbsp; &nbsp; &nbsp; &nbsp; }</p><p>&nbsp; &nbsp; for(i=0;i&lt;k;i++){//替换</p><p>&nbsp; &nbsp; &nbsp; &nbsp; obj1-&gt;vec[n-1+i]=obj3[i];</p><p>&nbsp; &nbsp; }</p><p>&nbsp; &nbsp; obj1-&gt;length+=(k-j);</p><p>}</p><p>}</p><p>void DeleteStr(str *obj1,char *obj2,int pos){//删除</p><p>&nbsp; &nbsp; int begin;</p><p>&nbsp; &nbsp; int i;</p><p>&nbsp; &nbsp; int obj2_length=StrLength(obj2);</p><p>&nbsp; &nbsp; begin=FindStr(obj1,obj2,pos-1);</p><p>&nbsp; &nbsp; begin=begin-1;//数组中的位置</p><p>&nbsp; &nbsp; for(i=0;i&lt;obj1-&gt;length-begin-obj2_length+1;i++){</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; obj1-&gt;vec[begin+i]=obj1-&gt;vec[begin+obj2_length+i];</p><p>&nbsp; &nbsp; }</p><p>obj1-&gt;length-=obj2_length;</p><p>}</p><p>void&nbsp; CompareStr(str *obj1,char *obj2){//比较串大小</p><p>&nbsp; &nbsp; int i;</p><p>&nbsp; &nbsp; printf(&quot;大的字符串为n&quot;);</p><p>&nbsp; &nbsp; &nbsp;(obj1-&gt;length)&gt;(StrLength(obj2))?ShowStr(obj1):ShowStr2(obj2);</p><p>}</p><p>void ConnectStr(str *obj1,char *obj2){//串连接</p><p>&nbsp; &nbsp; int i=0;</p><p>&nbsp; &nbsp; for(i=0;i&lt;StrLength(obj2);i++){</p><p>&nbsp; &nbsp; &nbsp; &nbsp; obj1-&gt;vec[obj1-&gt;length+i]=obj2[i];</p><p>&nbsp; &nbsp; }</p><p>&nbsp; &nbsp; obj1-&gt;length+=StrLength(obj2);</p><p>}</p><p>void InsertStr(str *obj1,char *obj2,int index){//串插入</p><p>&nbsp; &nbsp;int i=0;</p><p>&nbsp; &nbsp;for(i=0;i&lt;obj1-&gt;length-index;i++){//向后移</p><p>&nbsp; &nbsp; obj1-&gt;vec[obj1-&gt;length-1-i]=obj1-&gt;vec[obj1-&gt;length-1+StrLength(obj2)-i];</p><p>&nbsp; &nbsp; &nbsp;}</p><p>&nbsp; &nbsp;for(i=0;i&lt;StrLength(obj2);i++){//替换</p><p>&nbsp; &nbsp; obj1-&gt;vec[index+i]=obj2[i];</p><p>&nbsp; &nbsp; }</p><p>&nbsp; &nbsp; obj1-&gt;length+=StrLength(obj2);</p><p>&nbsp; &nbsp; printf(&quot;长度为%d&quot;,obj1-&gt;length);</p><p>}</p><p>int main(void){</p><p>&nbsp; &nbsp; int i=0;int n; int z=0;int m;int x;int t=1;static int h;static int count=1;int k;int index;</p><p>&nbsp; &nbsp;str *obj=( str*)malloc(sizeof(str));;</p><p>&nbsp; &nbsp;char t1[MAXLEN];</p><p>&nbsp; &nbsp; char t2[MAXLEN];</p><p>&nbsp; &nbsp; char t3[MAXLEN];</p><p>&nbsp; &nbsp; char t4[MAXLEN];</p><p>&nbsp; &nbsp; char t5[MAXLEN];</p><p>&nbsp; &nbsp; char t6[MAXLEN];</p><p>&nbsp; &nbsp; char t7[MAXLEN];</p><p>&nbsp; &nbsp; char t8[MAXLEN];</p><p>&nbsp; &nbsp; &nbsp;char t9[MAXLEN];</p><p>&nbsp; &nbsp;while(t){</p><p>&nbsp; &nbsp; printf(&quot;t欢迎来到串处理程序n&quot;);</p><p>&nbsp; &nbsp; printf(&quot;t*******************************n&quot;);</p><p>&nbsp; &nbsp; printf(&quot;t1.初始化串n&quot;);</p><p>&nbsp; &nbsp; printf(&quot;t2.创建串n&quot;);</p><p>&nbsp; &nbsp; printf(&quot;t3.遍历串n&quot;);</p><p>&nbsp; &nbsp; printf(&quot;t4.查找子串n&quot;);</p><p>&nbsp; &nbsp; printf(&quot;t5.逆序串n&quot;);</p><p>&nbsp; &nbsp; printf(&quot;t6.替换串n&quot;);</p><p>&nbsp; &nbsp; printf(&quot;t7.删除串n&quot;);</p><p>&nbsp; &nbsp; printf(&quot;t8.比较串大小串n&quot;);</p><p>&nbsp; &nbsp; printf(&quot;t9.连接串n&quot;);</p><p>&nbsp; &nbsp; printf(&quot;t10.插入串n&quot;);</p><p>&nbsp; &nbsp; printf(&quot;t11.退出n&quot;);</p><p>&nbsp; &nbsp; printf(&quot;请输入你要进行的操作:n&quot;);</p><p>&nbsp; &nbsp; &nbsp;fflush(stdin);</p><p>&nbsp; &nbsp; scanf(&quot;%d&quot;,&amp;x);</p><p>&nbsp; &nbsp; switch(x){</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case 1:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; InitStr(obj);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;printf(&quot;初始化串完毕n&quot;);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case 2:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; printf(&quot;请输入字符串:n&quot;);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fflush(stdin);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;gets(t1);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; n=StrLength(t1);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CreateStr(obj,t1);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; printf(&quot;创建串完毕n&quot;);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case 3:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ShowStr(obj);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;case 4:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;printf(&quot;请输入需要查找的字符串n&quot;);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fflush(stdin);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;gets(t2);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;printf(&quot;请输入从第几个位置开始查找n&quot;);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fflush(stdin);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;scanf(&quot;%d&quot;,&amp;z);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;z=z-1;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; while(1){</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;m=FindStr(obj,t2,z);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if(m==0){</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; printf(&quot;找到了在%dn&quot;,m);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; z=FindStr(obj,t2,z);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;m=z;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;case 5:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;printf(&quot;倒序后n&quot;);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ReverseStr(obj,t3);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ShowStr(obj);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;case 6:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;printf(&quot;请输入需要替换的字符串n&quot;);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fflush(stdin);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;gets(t4);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; printf(&quot;请输入替换后的字符串n&quot;);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fflush(stdin);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;gets(t5);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;printf(&quot;请输入从第几个位置开始替换n&quot;);//这个功能出错了，不能局部替换了，只能全局替换，懒得改了，心累</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fflush(stdin);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;scanf(&quot;%d&quot;,&amp;h);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;while( 1){</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if(FindStr(obj,t4,h)!=0){</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ReplaceStr(obj,t4,t5,h);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;h=FindStr(obj,t4,h);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}else{</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ShowStr(obj);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;case 7:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;printf(&quot;请输入你要删除的串n&quot;);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fflush(stdin);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;gets(t6);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;printf(&quot;请输入你要删除的起始位置:n&quot;);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fflush(stdin);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;scanf(&quot;%d&quot;,&amp;k);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; while( FindStr(obj,t6,k)){</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DeleteStr(obj,t6,k);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ShowStr(obj);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;case 8:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;printf(&quot;请输入你要比较大小的字符串n&quot;);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fflush(stdin);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;gets(t7);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CompareStr(obj,t7);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;case 9:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;printf(&quot;请输入你要连接的字符串n&quot;);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fflush(stdin);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;gets(t8);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ConnectStr(obj,t8);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ShowStr(obj);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case 10:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; printf(&quot;请输入插入的位置n&quot;);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;scanf(&quot;%d&quot;,&amp;index);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;printf(&quot;请输入你要插入的字符串n&quot;);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fflush(stdin);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;gets(t9);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;InsertStr(obj,t9,index);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ShowStr(obj);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case 11:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;t=0;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break;</p><p>&nbsp; &nbsp; }</p><p>&nbsp; &nbsp; }</p><p>&nbsp;return 0;</p><p>}</p><p><br/></p>',0,0,0,1,1,0,'2019-03-25  21:28:45','2019-03-25  21:28:45',0),(61,1,'selenium','二叉树','<p>//测试结点abd###ce##f##</p><p>#include&lt;stdio.h&gt;</p><p>#include&lt;stdlib.h&gt;</p><p>#include&lt;string.h&gt;</p><p>#define MAXLENGTH 30</p><p>typedef struct Binode&nbsp;</p><p>{</p><p><span style=\"white-space:pre\">	</span>char data;</p><p><span style=\"white-space:pre\">	</span>struct Binode *lchild;</p><p><span style=\"white-space:pre\">	</span>struct Binode *rchild;</p><p>}</p><p>Binode,*Bintree;</p><p>Bintree t=NULL;</p><p>int n=0;</p><p>int n2=0;</p><p>int d1=0,d2=0,max=0;</p><p>void CreateBintree(Bintree *t )&nbsp;</p><p>{</p><p><span style=\"white-space:pre\">	</span>//先序创建二叉树</p><p><span style=\"white-space:pre\">	</span>char ch=0;</p><p><span style=\"white-space:pre\">	</span>if((ch=getchar())==&#39;#&#39;)&nbsp;</p><p><span style=\"white-space:pre\">	</span>{</p><p><span style=\"white-space:pre\">		</span>*t=NULL;</p><p><span style=\"white-space:pre\">	</span>} else&nbsp;</p><p><span style=\"white-space:pre\">	</span>{</p><p><span style=\"white-space:pre\">		</span>*t=(Binode*)malloc(sizeof(Binode));</p><p><span style=\"white-space:pre\">		</span>(*t)-&gt;data=ch;</p><p><span style=\"white-space:pre\">		</span>CreateBintree(&amp;(*t)-&gt;lchild);</p><p><span style=\"white-space:pre\">		</span>CreateBintree(&amp;(*t)-&gt;rchild);</p><p><span style=\"white-space:pre\">	</span>}</p><p>}</p><p>void PreBintree(Bintree t)&nbsp;</p><p>{</p><p><span style=\"white-space:pre\">	</span>//先序遍历</p><p><span style=\"white-space:pre\">	</span>if(t==NULL) return; else&nbsp;</p><p><span style=\"white-space:pre\">	</span>{</p><p><span style=\"white-space:pre\">		</span>printf(&quot;%c&quot;,t-&gt;data);</p><p><span style=\"white-space:pre\">		</span>PreBintree(t-&gt;lchild);</p><p><span style=\"white-space:pre\">		</span>PreBintree(t-&gt;rchild);</p><p><span style=\"white-space:pre\">	</span>}</p><p>}</p><p>void MidBintree(Bintree t)&nbsp;</p><p>{</p><p><span style=\"white-space:pre\">	</span>//中序遍历</p><p><span style=\"white-space:pre\">	</span>if(t==NULL) return; else&nbsp;</p><p><span style=\"white-space:pre\">	</span>{</p><p><span style=\"white-space:pre\">		</span>MidBintree(t-&gt;lchild);</p><p><span style=\"white-space:pre\">		</span>printf(&quot;%c&quot;,t-&gt;data);</p><p><span style=\"white-space:pre\">		</span>MidBintree(t-&gt;rchild);</p><p><span style=\"white-space:pre\">	</span>}</p><p>}</p><p>void LastBintree(Bintree t)&nbsp;</p><p>{</p><p><span style=\"white-space:pre\">	</span>//后序遍历</p><p><span style=\"white-space:pre\">	</span>if(t==NULL) return; else&nbsp;</p><p><span style=\"white-space:pre\">	</span>{</p><p><span style=\"white-space:pre\">		</span>LastBintree(t-&gt;lchild);</p><p><span style=\"white-space:pre\">		</span>LastBintree(t-&gt;rchild);</p><p><span style=\"white-space:pre\">		</span>printf(&quot;%c&quot;,t-&gt;data);</p><p><span style=\"white-space:pre\">	</span>}</p><p>}</p><p>void LevelBintree(Bintree t)&nbsp;</p><p>{</p><p><span style=\"white-space:pre\">	</span>//层次遍历</p><p><span style=\"white-space:pre\">	</span>int i,j;</p><p><span style=\"white-space:pre\">	</span>Bintree q[MAXLENGTH];</p><p><span style=\"white-space:pre\">	</span>Bintree p;</p><p><span style=\"white-space:pre\">	</span>p=t;</p><p><span style=\"white-space:pre\">	</span>if(p!=NULL)&nbsp;</p><p><span style=\"white-space:pre\">	</span>{</p><p><span style=\"white-space:pre\">		</span>i=0;</p><p><span style=\"white-space:pre\">		</span>q[i]=p;</p><p><span style=\"white-space:pre\">		</span>j=1;</p><p><span style=\"white-space:pre\">	</span>}</p><p><span style=\"white-space:pre\">	</span>while(i!=j)&nbsp;</p><p><span style=\"white-space:pre\">	</span>{</p><p><span style=\"white-space:pre\">		</span>p=q[i];</p><p><span style=\"white-space:pre\">		</span>printf(&quot;%c&quot;,p-&gt;data);</p><p><span style=\"white-space:pre\">		</span>if(p-&gt;lchild!=NULL)&nbsp;</p><p><span style=\"white-space:pre\">		</span>{</p><p><span style=\"white-space:pre\">			</span>q[j]=p-&gt;lchild;</p><p><span style=\"white-space:pre\">			</span>j++;</p><p><span style=\"white-space:pre\">		</span>}</p><p><span style=\"white-space:pre\">		</span>if(p-&gt;rchild!=NULL)&nbsp;</p><p><span style=\"white-space:pre\">		</span>{</p><p><span style=\"white-space:pre\">			</span>q[j]=p-&gt;rchild;</p><p><span style=\"white-space:pre\">			</span>j++;</p><p><span style=\"white-space:pre\">		</span>}</p><p><span style=\"white-space:pre\">		</span>i++;</p><p><span style=\"white-space:pre\">	</span>}</p><p>}</p><p>int LeafCount(Bintree t)&nbsp;</p><p>{</p><p><span style=\"white-space:pre\">	</span>//输出叶子结点个数</p><p><span style=\"white-space:pre\">	</span>if(t==NULL) return 0; else&nbsp;</p><p><span style=\"white-space:pre\">	</span>{</p><p><span style=\"white-space:pre\">		</span>if(t-&gt;lchild==NULL&amp;&amp;t-&gt;rchild==NULL)&nbsp;</p><p><span style=\"white-space:pre\">		</span>{</p><p><span style=\"white-space:pre\">			</span>n++;</p><p><span style=\"white-space:pre\">		</span>}</p><p><span style=\"white-space:pre\">		</span>LeafCount(t-&gt;lchild);</p><p><span style=\"white-space:pre\">		</span>LeafCount(t-&gt;rchild);</p><p><span style=\"white-space:pre\">		</span>return n;</p><p><span style=\"white-space:pre\">	</span>}</p><p>}</p><p>void LeafNode(Bintree t)&nbsp;</p><p>{</p><p><span style=\"white-space:pre\">	</span>//输出叶子结点</p><p><span style=\"white-space:pre\">	</span>if(t==NULL) return; else&nbsp;</p><p><span style=\"white-space:pre\">	</span>{</p><p><span style=\"white-space:pre\">		</span>if(t-&gt;lchild==NULL&amp;&amp;t-&gt;rchild==NULL)&nbsp;</p><p><span style=\"white-space:pre\">		</span>{</p><p><span style=\"white-space:pre\">			</span>printf(&quot;%c&quot;,t-&gt;data);</p><p><span style=\"white-space:pre\">		</span>}</p><p><span style=\"white-space:pre\">		</span>LeafNode(t-&gt;lchild);</p><p><span style=\"white-space:pre\">		</span>LeafNode(t-&gt;rchild);</p><p><span style=\"white-space:pre\">	</span>}</p><p>}</p><p>int DeepthBinTree(Bintree t)&nbsp;</p><p>{</p><p><span style=\"white-space:pre\">	</span>//树的深度</p><p><span style=\"white-space:pre\">	</span>if(t==NULL) return 0; else&nbsp;</p><p><span style=\"white-space:pre\">	</span>{</p><p><span style=\"white-space:pre\">		</span>d1=DeepthBinTree(t-&gt;lchild);</p><p><span style=\"white-space:pre\">		</span>d2=DeepthBinTree(t-&gt;rchild);</p><p><span style=\"white-space:pre\">		</span>max=d1&gt;d2?d1:d2;</p><p><span style=\"white-space:pre\">		</span>return max+1;</p><p><span style=\"white-space:pre\">	</span>}</p><p>}</p><p>int NodeNo(Bintree t)&nbsp;</p><p>{</p><p><span style=\"white-space:pre\">	</span>//输出结点个数</p><p><span style=\"white-space:pre\">	</span>if(t==NULL) return 0; else&nbsp;</p><p><span style=\"white-space:pre\">	</span>{</p><p><span style=\"white-space:pre\">		</span>if(t-&gt;data!=&#39;#&#39;)&nbsp;</p><p><span style=\"white-space:pre\">		</span>{</p><p><span style=\"white-space:pre\">			</span>n2++;</p><p><span style=\"white-space:pre\">		</span>}</p><p><span style=\"white-space:pre\">		</span>NodeNo(t-&gt;lchild);</p><p><span style=\"white-space:pre\">		</span>NodeNo(t-&gt;rchild);</p><p><span style=\"white-space:pre\">		</span>return n2;</p><p><span style=\"white-space:pre\">	</span>}</p><p>}</p><p>int main(void)&nbsp;</p><p>{</p><p><span style=\"white-space:pre\">	</span>int i=1;</p><p><span style=\"white-space:pre\">	</span>int x=0;</p><p><span style=\"white-space:pre\">	</span>int y=0;</p><p><span style=\"white-space:pre\">	</span>while(i)&nbsp;</p><p><span style=\"white-space:pre\">	</span>{</p><p><span style=\"white-space:pre\">		</span>printf(&quot;t欢迎来到树的操作程序n&quot;);</p><p>&nbsp; printf(&quot;t1.创建树n&quot;);</p><p>&nbsp; printf(&quot;t2.遍历树n&quot;);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; printf(&quot;t3.求叶子节点个数n&quot;);</p><p>&nbsp; printf(&quot;t4.输出根节点n&quot;);</p><p>&nbsp; printf(&quot;t5.输出树的深度n&quot;);</p><p>&nbsp; printf(&quot;t6.输出树的结点个数n&quot;);</p><p>&nbsp; printf(&quot;t0.EXITn&quot;);</p><p>&nbsp; printf(&quot;请输入你要进行的操作n&quot;);</p><p>&nbsp; fflush(stdin);</p><p>&nbsp; scanf(&quot;%d&quot;,&amp;x);</p><p>&nbsp; switch(x){</p><p>&nbsp; case 1:</p><p>&nbsp; &nbsp;printf(&quot;请输入创建的树的结点(空节点请输入#):n&quot;);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fflush(stdin);</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CreateBintree(&amp;t);</p><p>&nbsp; &nbsp;printf(&quot;树创建完毕:n&quot;);</p><p>&nbsp; &nbsp;break;</p><p>&nbsp; case 2:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; printf(&quot;1.先序遍历n&quot;);</p><p>&nbsp; &nbsp;printf(&quot;2.中序遍历n&quot;);</p><p>&nbsp; &nbsp;printf(&quot;3.后序遍历n&quot;);</p><p>&nbsp; &nbsp;printf(&quot;4.层次遍历n&quot;);</p><p>&nbsp; &nbsp;printf(&quot;请选择你的操作n&quot;);</p><p>&nbsp; &nbsp;scanf(&quot;%d&quot;,&amp;y);</p><p>&nbsp; &nbsp;switch(y){</p><p>&nbsp; &nbsp;case 1:PreBintree(t);printf(&quot;n&quot;);break;</p><p>&nbsp; &nbsp;case 2:MidBintree(t);printf(&quot;n&quot;);break;</p><p>&nbsp; &nbsp;case 3:LastBintree(t);printf(&quot;n&quot;);break;</p><p>&nbsp; &nbsp;case 4:LevelBintree(t);printf(&quot;n&quot;);break;</p><p>&nbsp; &nbsp; &nbsp; }</p><p>&nbsp; &nbsp;break;</p><p>&nbsp; case 3:</p><p>&nbsp; &nbsp;printf(&quot;树的叶子结点个数为%dn&quot;,LeafCount(t));</p><p>&nbsp; &nbsp;printf(&quot;n&quot;);</p><p>&nbsp; &nbsp;break;</p><p>&nbsp; &nbsp;case 4:</p><p>&nbsp; &nbsp;printf(&quot;树的叶子结点如下:n&quot;);</p><p>&nbsp; &nbsp;LeafNode(t);</p><p>&nbsp; &nbsp;printf(&quot;n&quot;);</p><p>&nbsp; &nbsp; &nbsp; break;</p><p>&nbsp; &nbsp;case 5:</p><p>&nbsp; &nbsp;printf(&quot;树的深度为%dn&quot;,DeepthBinTree(t));</p><p>&nbsp; &nbsp;printf(&quot;n&quot;);</p><p>&nbsp; &nbsp;break;</p><p>&nbsp; &nbsp;case 6:</p><p>&nbsp; &nbsp;printf(&quot;树的结点个数为%dn&quot;,NodeNo(t));</p><p>&nbsp; &nbsp;printf(&quot;n&quot;);</p><p>&nbsp; &nbsp;break;</p><p>&nbsp; case 0:</p><p>&nbsp; &nbsp;i=0;</p><p>&nbsp; &nbsp;break;</p><p>&nbsp; }</p><p>&nbsp;}</p><p>&nbsp; &nbsp; return 0;</p><p>}</p><p><br/></p>',0,0,0,1,1,0,'2019-03-25  21:42:17','2019-03-25  21:42:17',0),(62,1,'selenium','图','<p>/* 图的邻接矩阵的广度优先和深度优先搜索*/</p><p>#include &lt;stdio.h&gt;</p><p>#include &lt;stdlib.h&gt;</p><p>#define MAXLEN 10</p><p>typedef struct Graph&nbsp;</p><p>{</p><p><span style=\"white-space:pre\">	</span>char Point[MAXLEN];</p><p><span style=\"white-space:pre\">	</span>/* 顶点 */</p><p><span style=\"white-space:pre\">	</span>int Edge[MAXLEN][MAXLEN];</p><p><span style=\"white-space:pre\">	</span>/* 邻接矩阵 */</p><p><span style=\"white-space:pre\">	</span>int n;</p><p><span style=\"white-space:pre\">	</span>/* 顶点个数 */</p><p><span style=\"white-space:pre\">	</span>int e;</p><p><span style=\"white-space:pre\">	</span>/* 边个数 */</p><p><span style=\"white-space:pre\">	</span>int choose;</p><p><span style=\"white-space:pre\">	</span>/* 0代表无向图，1代表有向图 */</p><p>}</p><p>Graph;</p><p>typedef struct seqQueue&nbsp;</p><p>{</p><p><span style=\"white-space:pre\">	</span>int data[MAXLEN];</p><p><span style=\"white-space:pre\">	</span>int front, rear;</p><p>}</p><p>seqQueen;</p><p>int visited[MAXLEN];</p><p>int visited2[MAXLEN];</p><p>int graph_Location( Graph *g, char point )&nbsp; &nbsp; &nbsp;&nbsp;</p><p>/* 定位顶点位置 */&nbsp;</p><p>{</p><p><span style=\"white-space:pre\">	</span>int i;</p><p><span style=\"white-space:pre\">	</span>for ( i = 0; i &lt; g-&gt;n; i++ )&nbsp;</p><p><span style=\"white-space:pre\">	</span>{</p><p><span style=\"white-space:pre\">		</span>if ( point == g-&gt;Point[i] )</p><p><span style=\"white-space:pre\">		</span>&nbsp; &nbsp;return(i);</p><p><span style=\"white-space:pre\">	</span>}</p><p>}</p><p>void graph_Create( Graph *g )&nbsp;</p><p>/* 图的初始化 */&nbsp;</p><p>{</p><p><span style=\"white-space:pre\">	</span>int m = 0, n = 0;</p><p><span style=\"white-space:pre\">	</span>int count = 1;</p><p><span style=\"white-space:pre\">	</span>char head, rear;</p><p><span style=\"white-space:pre\">	</span>int i, j;</p><p><span style=\"white-space:pre\">	</span>for ( i = 0; i &lt; g-&gt;n; i++ )&nbsp;</p><p><span style=\"white-space:pre\">	</span>{</p><p><span style=\"white-space:pre\">		</span>printf( &quot;请输入图的顶点:n&quot; );</p><p>&nbsp; fflush( stdin );</p><p>&nbsp; scanf( &quot;%c&quot;, &amp;g-&gt;Point[i] );</p><p>&nbsp;}</p><p>&nbsp;printf( &quot;顶点初始化完毕n&quot; );</p><p>&nbsp;for ( m = 0; m &lt; g-&gt;n; m++ )</p><p>&nbsp; for ( n = 0; n &lt; g-&gt;n; n++ ) /* 将邻接矩阵初始化为0 */</p><p>&nbsp; {</p><p>&nbsp; &nbsp;g-&gt;Edge[m][n] = 0;</p><p>&nbsp; }</p><p>&nbsp;for ( m = 0; m &lt; g-&gt;e; m++ )</p><p>&nbsp;{</p><p>&nbsp; printf( &quot;请输入第%d条弧的弧尾信息:n&quot;, count );</p><p>&nbsp; fflush( stdin );</p><p>&nbsp; scanf( &quot;%c&quot;, &amp;rear );</p><p>&nbsp; printf( &quot;请输入第%d条弧的弧头信息:n&quot;, count );</p><p>&nbsp; fflush( stdin );</p><p>&nbsp; scanf( &quot;%c&quot;, &amp;head );</p><p>&nbsp; i = graph_Location( g, rear );</p><p>&nbsp; j = graph_Location( g, head );</p><p>&nbsp; if ( g-&gt;choose == 1 )</p><p>&nbsp; {</p><p>&nbsp; &nbsp;g-&gt;Edge[i][j] = 1;</p><p>&nbsp; &nbsp;count++;</p><p>&nbsp; }else{</p><p>&nbsp; &nbsp;g-&gt;Edge[i][j] = 1;</p><p>&nbsp; &nbsp;g-&gt;Edge[j][i] = 1;</p><p>&nbsp; &nbsp;count++;</p><p>&nbsp; }</p><p>&nbsp;}</p><p>&nbsp;printf( &quot;边初始化完毕n&quot; );</p><p>}</p><p>void graph_Output( Graph *g ) /* 输出所有的边 */</p><p>{</p><p>&nbsp;int i, j;</p><p>&nbsp;for ( i = 0; i &lt; g-&gt;n; i++ )</p><p>&nbsp; for ( j = 0; j &lt; g-&gt;n; j++ )</p><p>&nbsp; {</p><p>&nbsp; &nbsp;if ( g-&gt;Edge[i][j] )</p><p>&nbsp; &nbsp;{</p><p>&nbsp; &nbsp; printf( &quot;%c--&gt;%cn&quot;, g-&gt;Point[i], g-&gt;Point[j] );</p><p>&nbsp; &nbsp;}</p><p>&nbsp; }</p><p>}</p><p>void graph_Output2( Graph *g ) /* 以矩阵的形式输出 */</p><p>{</p><p>&nbsp;int i, j;</p><p>&nbsp;for ( i = 0; i &lt; g-&gt;n; i++ )</p><p>&nbsp; for ( j = 0; j &lt; g-&gt;n; j++ )</p><p>&nbsp; {</p><p>&nbsp; &nbsp;{</p><p>&nbsp; &nbsp; printf( &quot;%d&quot;, g-&gt;Edge[i][j] );</p><p>&nbsp; &nbsp; if ( j == g-&gt;n - 1 )</p><p>&nbsp; &nbsp; &nbsp;printf( &quot;n&quot; );</p><p>&nbsp; &nbsp;}</p><p>&nbsp; }</p><p>}</p><p>void graph_DFS( Graph *g, int i ) /* 深度优先查找 */</p><p>{</p><p>&nbsp;int j;</p><p>&nbsp;visited[i] = 1;</p><p>&nbsp;printf( &quot;%c &quot;, g-&gt;Point[i] );</p><p>&nbsp;for ( j = 0; j &lt; g-&gt;n; j++ )</p><p>&nbsp;{</p><p>&nbsp; if ( g-&gt;Edge[i][j] == 1 &amp;&amp; visited[j] != 1 )</p><p>&nbsp; {</p><p>&nbsp; &nbsp;graph_DFS( g, j );</p><p>&nbsp; }</p><p>&nbsp;}</p><p>}</p><p>void graph_DFS_Traversal( Graph *g ) /* 深度优先查找遍历 */</p><p>{</p><p>&nbsp;int i;</p><p>&nbsp;for ( i = 0; i &lt; g-&gt;n; i++ )</p><p>&nbsp;{</p><p>&nbsp; visited[i] = 0;</p><p>&nbsp;}</p><p>&nbsp;for ( i = 0; i &lt; g-&gt;n; i++ )</p><p>&nbsp;{</p><p>&nbsp; if ( !visited[i] )</p><p>&nbsp; {</p><p>&nbsp; &nbsp;graph_DFS( g, i );</p><p>&nbsp; }</p><p>&nbsp;}</p><p>}</p><p>void initQueen( seqQueen *Q )&nbsp; &nbsp;/* 初始化队列 */</p><p>{</p><p>&nbsp;Q-&gt;front = 0;</p><p>&nbsp;Q-&gt;rear&nbsp; = 0;</p><p>}</p><p>int isEmpty( seqQueen *Q )&nbsp; &nbsp; &nbsp; /* 队列是否为空,空返回1,不空返回0; */</p><p>{</p><p>&nbsp;if ( Q-&gt;front == Q-&gt;rear )</p><p>&nbsp;{</p><p>&nbsp; return(1);</p><p>&nbsp;}else{</p><p>&nbsp; return(0);</p><p>&nbsp;}</p><p>}</p><p>void inQueen( seqQueen *Q, int e ) /* 进栈 */</p><p>{</p><p>&nbsp;if ( Q-&gt;rear + 1 == MAXLEN )</p><p>&nbsp;{</p><p>&nbsp; printf( &quot;栈满了n&quot; );</p><p>&nbsp; exit( 0 );</p><p>&nbsp;}</p><p>&nbsp;Q-&gt;data[Q-&gt;rear] = e;</p><p>&nbsp;Q-&gt;rear++;</p><p>}</p><p>int outQueen( seqQueen *Q ) /* 出栈 */</p><p>{</p><p>&nbsp;int e;</p><p>&nbsp;if ( isEmpty( Q ) )</p><p>&nbsp;{</p><p>&nbsp; printf( &quot;栈为空n&quot; );</p><p>&nbsp; exit( 0 );</p><p>&nbsp;}</p><p>&nbsp;e = Q-&gt;data[Q-&gt;front];</p><p>&nbsp;Q-&gt;front++;</p><p>&nbsp;return(e);</p><p>}</p><p>void graph_BFS( Graph *g, int i ) /* 广度优先遍历 */</p><p>{</p><p>&nbsp;seqQueen Q;</p><p>&nbsp;int&nbsp; j, k;</p><p>&nbsp;initQueen( &amp;Q );</p><p>&nbsp;printf( &quot;%c &quot;, g-&gt;Point[i] );</p><p>&nbsp;visited2[i] = 1;</p><p>&nbsp;inQueen( &amp;Q, i );</p><p>&nbsp;while ( !isEmpty( &amp;Q ) )</p><p>&nbsp;{</p><p>&nbsp; k = outQueen( &amp;Q );</p><p>&nbsp; for ( j = 0; j &lt; g-&gt;n; j++ )</p><p>&nbsp; {</p><p>&nbsp; &nbsp;if ( g-&gt;Edge[k][j] == 1 &amp;&amp; visited2[j] != 1 )&nbsp; &nbsp;/* 搜索顶点k的邻接顶点 */</p><p>&nbsp; &nbsp;{</p><p>&nbsp; &nbsp; printf( &quot;%c &quot;, g-&gt;Point[j] );&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/* 若顶点未访问则访问 */</p><p>&nbsp; &nbsp; visited2[j] = 1;</p><p>&nbsp; &nbsp; inQueen( &amp;Q, j );</p><p>&nbsp; &nbsp;}</p><p>&nbsp; }</p><p>&nbsp;}</p><p>}</p><p>void graph_BFS_Travelsal( Graph *g )</p><p>{</p><p>&nbsp;int i;</p><p>&nbsp;for ( i = 0; i &lt; g-&gt;n; i++ )</p><p>&nbsp;{</p><p>&nbsp; visited2[i] = 0;</p><p>&nbsp;}</p><p>&nbsp;for ( i = 0; i &lt; g-&gt;n; i++ )</p><p>&nbsp;{</p><p>&nbsp; if ( !visited2[i] )</p><p>&nbsp; {</p><p>&nbsp; &nbsp;graph_BFS( g, i );</p><p>&nbsp; }</p><p>&nbsp;}</p><p>}</p><p>int main( void )</p><p>{</p><p>&nbsp;int n;</p><p>&nbsp;int y = 1;</p><p>&nbsp;Graph g;</p><p>&nbsp;while ( y )</p><p>&nbsp;{</p><p>&nbsp; printf( &quot;t-------图-------n&quot; );</p><p>&nbsp; printf( &quot;t---1.建立图---n&quot; );</p><p>&nbsp; printf( &quot;t---2.输出所有的边---n&quot; );</p><p>&nbsp; printf( &quot;t---3.输出邻接矩阵---n&quot; );</p><p>&nbsp; printf( &quot;t---4.深度优先遍历---n&quot; );</p><p>&nbsp; printf( &quot;t---5.广度优先遍历---n&quot; );</p><p>&nbsp; printf( &quot;t---0.退出---n&quot; );</p><p>&nbsp; printf( &quot;请输入你的选择:n&quot; );</p><p>&nbsp; scanf( &quot;%d&quot;, &amp;n );</p><p>&nbsp; switch ( n )</p><p>&nbsp; {</p><p>&nbsp; case 1: printf( &quot;请选择建立无向图还是有向图(无向图:0,有向图:1)n&quot; );</p><p>&nbsp; &nbsp;scanf( &quot;%d&quot;, &amp;g.choose );</p><p>&nbsp; &nbsp;printf( &quot;请输入顶点个数:n&quot; );</p><p>&nbsp; &nbsp;scanf( &quot;%d&quot;, &amp;g.n );</p><p>&nbsp; &nbsp;printf( &quot;请输入边的条数:n&quot; );</p><p>&nbsp; &nbsp;fflush( stdin );</p><p>&nbsp; &nbsp;scanf( &quot;%d&quot;, &amp;g.e );</p><p>&nbsp; &nbsp;graph_Create( &amp;g );</p><p>&nbsp; &nbsp;break;</p><p>&nbsp; case 2: graph_Output( &amp;g );</p><p>&nbsp; &nbsp;break;</p><p>&nbsp; case 3: graph_Output2( &amp;g );</p><p>&nbsp; &nbsp;break;</p><p>&nbsp; case 4: graph_DFS_Traversal( &amp;g );</p><p>&nbsp; &nbsp;break;</p><p>&nbsp; case 5: graph_BFS_Travelsal( &amp;g ); break;</p><p>&nbsp; case 0: y = 0; break;</p><p>&nbsp; }</p><p>&nbsp;}</p><p>&nbsp;return(0);</p><p>}</p><p><br/></p>',0,0,0,1,1,0,'2019-03-25  21:43:12','2019-03-25  21:43:12',0),(63,1,'selenium','哈夫曼树','<p><br/></p><p><br/></p><p>/*</p><p>*用一个数组保存节点,前面n为叶子结点,</p><p>*因为哈夫曼树没有度为1的节点，所以总结点数为2*n-1,</p><p>*后面为组合的节点</p><p>*/</p><p>#include&lt;iostream&gt;using namespace std;</p><p>typedef struct HTNODE&nbsp;</p><p>{</p><p><span style=\"white-space:pre\">	</span>int weight;</p><p><span style=\"white-space:pre\">	</span>int parent;</p><p><span style=\"white-space:pre\">	</span>int lchild;</p><p><span style=\"white-space:pre\">	</span>int rchild;</p><p>}</p><p>HTNOOD;</p><p>typedef struct LINKNODE&nbsp;</p><p>{</p><p><span style=\"white-space:pre\">	</span>int weight;</p><p><span style=\"white-space:pre\">	</span>int index;</p><p><span style=\"white-space:pre\">	</span>LINKNODE * next;</p><p>}</p><p>LINKNODE;</p><p>int getMinIndex(int n,HTNOOD * HT[],LINKNODE* head)&nbsp;</p><p>{</p><p><span style=\"white-space:pre\">	</span>//求最小值（这个函数是哈夫曼树的关键）</p><p><span style=\"white-space:pre\">	</span>LINKNODE *p=head;</p><p><span style=\"white-space:pre\">	</span>int count=0;</p><p><span style=\"white-space:pre\">	</span>for (int i=0;i&lt;2*n-1;i++)&nbsp;</p><p><span style=\"white-space:pre\">	</span>{</p><p><span style=\"white-space:pre\">		</span>if(HT[i]-&gt;parent==0&amp;&amp;HT[i]-&gt;weight!=0)&nbsp;</p><p><span style=\"white-space:pre\">		</span>{</p><p><span style=\"white-space:pre\">			</span>//将已经排过序的节点排除掉和还未赋值的节点排除掉</p><p><span style=\"white-space:pre\">			</span>LINKNODE* node=new LINKNODE;</p><p><span style=\"white-space:pre\">			</span>node-&gt;weight=HT[i]-&gt;weight;</p><p><span style=\"white-space:pre\">			</span>node-&gt;index=i;</p><p><span style=\"white-space:pre\">			</span>p-&gt;next=node;</p><p><span style=\"white-space:pre\">			</span>p=node;</p><p><span style=\"white-space:pre\">			</span>++count;</p><p><span style=\"white-space:pre\">		</span>}</p><p><span style=\"white-space:pre\">	</span>}</p><p><span style=\"white-space:pre\">	</span>LINKNODE *min=head-&gt;next;</p><p><span style=\"white-space:pre\">	</span>p=min-&gt;next;</p><p><span style=\"white-space:pre\">	</span>for (int i=0;i&lt;count-1;i++)&nbsp;</p><p><span style=\"white-space:pre\">	</span>{</p><p><span style=\"white-space:pre\">		</span>if((p-&gt;weight)&lt;(min-&gt;weight))&nbsp;</p><p><span style=\"white-space:pre\">		</span>{</p><p><span style=\"white-space:pre\">			</span>min=p;</p><p><span style=\"white-space:pre\">		</span>}</p><p><span style=\"white-space:pre\">		</span>p=p-&gt;next;</p><p><span style=\"white-space:pre\">	</span>}</p><p><span style=\"white-space:pre\">	</span>return min-&gt;index;</p><p>}</p><p>void createHaffmanTree(int n,HTNOOD* HT[])&nbsp;</p><p>{</p><p><span style=\"white-space:pre\">	</span>int length=2*n-1;</p><p><span style=\"white-space:pre\">	</span>int i=0;</p><p><span style=\"white-space:pre\">	</span>LINKNODE * head=new LINKNODE;</p><p><span style=\"white-space:pre\">	</span>while(i&lt;length)&nbsp;</p><p><span style=\"white-space:pre\">	</span>{</p><p><span style=\"white-space:pre\">		</span>//初始化数组&nbsp;</p><p><span style=\"white-space:pre\">		</span>HT[i]=new HTNOOD;</p><p><span style=\"white-space:pre\">		</span>if(i&lt;n)&nbsp;</p><p><span style=\"white-space:pre\">		</span>{</p><p><span style=\"white-space:pre\">			</span>cout&lt;&lt;&quot;请输入权值&quot;&lt;&lt;endl;</p><p><span style=\"white-space:pre\">			</span>cin&gt;&gt;HT[i]-&gt;weight;</p><p><span style=\"white-space:pre\">		</span>} else&nbsp;</p><p><span style=\"white-space:pre\">		</span>{</p><p><span style=\"white-space:pre\">			</span>HT[i]-&gt;weight=0;</p><p><span style=\"white-space:pre\">		</span>}</p><p><span style=\"white-space:pre\">		</span>HT[i]-&gt;parent=HT[i]-&gt;lchild=HT[i]-&gt;rchild=0;</p><p><span style=\"white-space:pre\">		</span>++i;</p><p><span style=\"white-space:pre\">	</span>}</p><p><span style=\"white-space:pre\">	</span>for (int i=n;i&lt;length;i++)&nbsp;</p><p><span style=\"white-space:pre\">	</span>{</p><p><span style=\"white-space:pre\">		</span>int first=getMinIndex(n,HT,head);</p><p><span style=\"white-space:pre\">		</span>HT[i]-&gt;lchild=first;</p><p><span style=\"white-space:pre\">		</span>HT[first]-&gt;parent=i;</p><p><span style=\"white-space:pre\">		</span>int second=getMinIndex(n,HT,head);</p><p><span style=\"white-space:pre\">		</span>HT[i]-&gt;rchild=second;</p><p><span style=\"white-space:pre\">		</span>HT[second]-&gt;parent=i;</p><p><span style=\"white-space:pre\">		</span>HT[i]-&gt;weight=(HT[first]-&gt;weight)+(HT[second]-&gt;weight);</p><p><span style=\"white-space:pre\">	</span>}</p><p><span style=\"white-space:pre\">	</span>for (int i=0;i&lt;length;i++)&nbsp;</p><p><span style=\"white-space:pre\">	</span>{</p><p><span style=\"white-space:pre\">		</span>cout&lt;&lt;HT[i]-&gt;weight&lt;&lt;endl;</p><p><span style=\"white-space:pre\">	</span>}</p><p>}</p><p>int main()&nbsp;</p><p>{</p><p><span style=\"white-space:pre\">	</span>HTNOOD *HT[7];</p><p><span style=\"white-space:pre\">	</span>int n=4;</p><p><span style=\"white-space:pre\">	</span>//假设叶子结点为4个</p><p><span style=\"white-space:pre\">	</span>createHaffmanTree(n,HT);</p><p>}</p><p><br/></p>',0,0,0,1,1,0,'2019-03-25  21:44:13','2019-03-25  21:44:13',0);
/*!40000 ALTER TABLE `article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `article_category_ref`
--

DROP TABLE IF EXISTS `article_category_ref`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `article_category_ref` (
  `article_id` int(11) DEFAULT NULL,
  `category_id` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `article_category_ref`
--

LOCK TABLES `article_category_ref` WRITE;
/*!40000 ALTER TABLE `article_category_ref` DISABLE KEYS */;
INSERT INTO `article_category_ref` VALUES (1,1),(2,1),(3,1),(24,1),(5,1),(7,1),(8,1),(9,1),(11,1),(20,1),(13,1),(14,1),(15,1),(16,1),(17,1),(18,1),(19,1),(20,1),(21,1),(22,1),(23,1),(4,1),(25,1),(26,1),(27,1),(28,1),(29,1),(6,1),(10,1),(NULL,1),(36,1),(37,7),(38,3),(NULL,25),(40,25),(41,26),(42,27),(43,26),(43,28),(43,28),(46,28),(47,28),(48,28),(49,28),(50,28),(51,28),(52,26),(52,26),(54,26),(55,29),(55,29),(57,29),(58,29),(59,29),(60,29),(61,29),(62,29),(63,29);
/*!40000 ALTER TABLE `article_category_ref` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `article_tag_ref`
--

DROP TABLE IF EXISTS `article_tag_ref`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `article_tag_ref` (
  `article_id` int(11) NOT NULL,
  `tag_id` int(11) NOT NULL,
  PRIMARY KEY (`article_id`,`tag_id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `article_tag_ref`
--

LOCK TABLES `article_tag_ref` WRITE;
/*!40000 ALTER TABLE `article_tag_ref` DISABLE KEYS */;
INSERT INTO `article_tag_ref` VALUES (1,1),(1,2),(2,1),(3,1),(4,1),(5,1),(6,1),(7,1),(8,1),(9,1),(10,1),(11,1),(12,1),(13,1),(14,1),(15,1),(16,1),(17,1),(18,1),(19,1),(20,1),(21,1),(22,1),(23,1),(24,1),(25,1),(26,1),(27,1),(28,1),(29,1),(29,2),(36,1),(37,1),(38,1),(40,3),(41,4),(42,5),(43,4),(43,6),(46,6),(47,6),(48,6),(49,6),(50,6),(51,6),(52,4),(54,4),(55,7),(57,7),(58,7),(59,7),(60,7),(61,7),(62,4),(63,7);
/*!40000 ALTER TABLE `article_tag_ref` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Temporary table structure for view `article_tag_view0`
--

DROP TABLE IF EXISTS `article_tag_view0`;
/*!50001 DROP VIEW IF EXISTS `article_tag_view0`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE VIEW `article_tag_view0` AS SELECT 
 1 AS `tag_id`*/;
SET character_set_client = @saved_cs_client;

--
-- Temporary table structure for view `article_tag_view1`
--

DROP TABLE IF EXISTS `article_tag_view1`;
/*!50001 DROP VIEW IF EXISTS `article_tag_view1`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE VIEW `article_tag_view1` AS SELECT 
 1 AS `article_id`*/;
SET character_set_client = @saved_cs_client;

--
-- Temporary table structure for view `article_tag_view2`
--

DROP TABLE IF EXISTS `article_tag_view2`;
/*!50001 DROP VIEW IF EXISTS `article_tag_view2`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE VIEW `article_tag_view2` AS SELECT 
 1 AS `article_id`,
 1 AS `article_title`*/;
SET character_set_client = @saved_cs_client;

--
-- Table structure for table `category`
--

DROP TABLE IF EXISTS `category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `category` (
  `category_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `category_name` varchar(50) DEFAULT NULL,
  `category_description` varchar(255) DEFAULT NULL,
  `category_icon` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`category_id`) USING BTREE,
  UNIQUE KEY `category_name` (`category_name`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `category`
--

LOCK TABLES `category` WRITE;
/*!40000 ALTER TABLE `category` DISABLE KEYS */;
INSERT INTO `category` VALUES (26,'mysql','','fa fa-book'),(27,'shiro','',''),(28,'python','',''),(29,'数据结构','','');
/*!40000 ALTER TABLE `category` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `comment`
--

DROP TABLE IF EXISTS `comment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `comment` (
  `comment_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `comment_article_id` int(11) unsigned DEFAULT NULL,
  `comment_user_name` varchar(255) DEFAULT NULL,
  `comment_user_email` varchar(255) DEFAULT NULL,
  `comment_content` varchar(1000) DEFAULT NULL,
  `comment_ip` varchar(50) DEFAULT NULL,
  `comment_create_time` varchar(255) DEFAULT NULL,
  `answer` int(11) DEFAULT NULL,
  PRIMARY KEY (`comment_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=44 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `comment`
--

LOCK TABLES `comment` WRITE;
/*!40000 ALTER TABLE `comment` DISABLE KEYS */;
INSERT INTO `comment` VALUES (43,40,'测试','895484122','评论测试','117.136.8.238','2019-03-23  20:00:02',0);
/*!40000 ALTER TABLE `comment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `contact`
--

DROP TABLE IF EXISTS `contact`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `contact` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `phone` varchar(255) DEFAULT NULL,
  `message` varchar(255) DEFAULT NULL,
  `send_time` varchar(255) DEFAULT NULL,
  `send_ip` varchar(255) DEFAULT NULL,
  `answer` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `contact`
--

LOCK TABLES `contact` WRITE;
/*!40000 ALTER TABLE `contact` DISABLE KEYS */;
INSERT INTO `contact` VALUES (1,'selenium','111','111','111','2017-10-06 23:54:18','0:0:0:0:0:0:0:1',1);
/*!40000 ALTER TABLE `contact` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `link`
--

DROP TABLE IF EXISTS `link`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `link` (
  `link_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `link_url` varchar(255) DEFAULT NULL,
  `link_name` varchar(255) DEFAULT NULL,
  `link_image` varchar(255) DEFAULT NULL,
  `link_description` varchar(255) DEFAULT NULL,
  `link_owner_nickname` varchar(40) DEFAULT NULL,
  `link_owner_contact` varchar(255) DEFAULT NULL,
  `link_update_time` datetime DEFAULT NULL,
  `link_create_time` datetime DEFAULT NULL,
  `link_order` int(2) unsigned DEFAULT '1',
  `link_status` int(1) unsigned DEFAULT '1',
  PRIMARY KEY (`link_id`) USING BTREE,
  UNIQUE KEY `link_name` (`link_name`) USING BTREE
) ENGINE=MyISAM AUTO_INCREMENT=9 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `link`
--

LOCK TABLES `link` WRITE;
/*!40000 ALTER TABLE `link` DISABLE KEYS */;
INSERT INTO `link` VALUES (1,'http://liuyanzhao.com','言曌博客',NULL,'一个码农的成长之路',NULL,'你好，我的丘丘是847064370','2017-10-07 16:51:03','2017-10-07 16:29:35',1,1),(6,'http://codergroup.cn/','开发者社区',NULL,'',NULL,'admin@liuyanzhao.com','2018-11-25 15:03:26','2017-10-07 16:51:49',1,1);
/*!40000 ALTER TABLE `link` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `me`
--

DROP TABLE IF EXISTS `me`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `me` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `avatar` varchar(255) DEFAULT NULL,
  `password` varchar(255) DEFAULT NULL,
  `nickname` varchar(255) DEFAULT NULL,
  `gender` int(11) DEFAULT NULL,
  `age` int(11) DEFAULT NULL,
  `phone` varchar(255) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `title` varchar(255) DEFAULT NULL,
  `vice_title` varchar(255) DEFAULT NULL,
  `introduction` mediumtext,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `me`
--

LOCK TABLES `me` WRITE;
/*!40000 ALTER TABLE `me` DISABLE KEYS */;
INSERT INTO `me` VALUES (1,'万涛','/resource/avatar/1.jpg','123456','Selenium',1,21,'18800269697','895484122@qq.com','你好，我是万涛','一个菜鸟程序员','我叫万涛。我21岁。我来自湖南省常德市。就读于上海电机学院。我的专业是软件工程。\r\n\r\n我对编程有浓厚的兴趣，性格开朗，善于沟通与合作，喜欢读小说和玩游戏。');
/*!40000 ALTER TABLE `me` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `menu`
--

DROP TABLE IF EXISTS `menu`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `menu` (
  `menu_id` int(11) NOT NULL AUTO_INCREMENT,
  `menu_name` varchar(255) DEFAULT NULL,
  `menu_url` varchar(255) DEFAULT NULL,
  `menu_level` int(11) DEFAULT NULL,
  `menu_icon` varchar(255) DEFAULT NULL,
  `menu_order` int(11) DEFAULT NULL,
  PRIMARY KEY (`menu_id`) USING BTREE,
  UNIQUE KEY `menu_name` (`menu_name`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `menu`
--

LOCK TABLES `menu` WRITE;
/*!40000 ALTER TABLE `menu` DISABLE KEYS */;
INSERT INTO `menu` VALUES (1,'留言板','/message',2,'fa fa-comment',1),(2,'LeetCode','https://leetcode.com/problemset/all',2,'ssss',3),(3,'关于本站','/aboutSite',1,'fa fa-info',1),(4,'文章归档','/articleFile',1,'fa-list-alt fa',2),(5,'申请友链','/applyLink',1,'fa fa-link',3);
/*!40000 ALTER TABLE `menu` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `message`
--

DROP TABLE IF EXISTS `message`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `message` (
  `message_id` int(11) NOT NULL AUTO_INCREMENT,
  `message_user_name` varchar(255) DEFAULT NULL,
  `message_content` mediumtext,
  `message_create_time` varchar(255) DEFAULT NULL,
  `answer` int(11) DEFAULT NULL,
  `message_ip` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`message_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=1014 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `message`
--

LOCK TABLES `message` WRITE;
/*!40000 ALTER TABLE `message` DISABLE KEYS */;
INSERT INTO `message` VALUES (1008,'sakura的男朋友','111111','2019-15-17  13:15:57',1,NULL),(1009,'sakura的男朋友','三玖天下第一','2019-20-17  13:20:54',0,NULL),(1010,'我开花了呦~','嘻嘻','2019-23-17  13:23:00',0,NULL),(1012,'sjj','今日打卡\r\n3-26\r\n','2019-03-26  15:41:11',0,'180.160.137.204');
/*!40000 ALTER TABLE `message` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `notice`
--

DROP TABLE IF EXISTS `notice`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `notice` (
  `notice_id` int(11) NOT NULL AUTO_INCREMENT,
  `notice_title` varchar(255) DEFAULT NULL,
  `notice_content` varchar(10000) DEFAULT NULL,
  `notice_create_time` datetime DEFAULT NULL,
  `notice_update_time` datetime DEFAULT NULL,
  `notice_status` int(1) unsigned DEFAULT '1',
  `notice_order` int(2) DEFAULT NULL,
  PRIMARY KEY (`notice_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `notice`
--

LOCK TABLES `notice` WRITE;
/*!40000 ALTER TABLE `notice` DISABLE KEYS */;
INSERT INTO `notice` VALUES (1,'本站下载地址','<p>本站后端基于 Spring+SpringMVC+Mybatis+JSP实现，对于初学SSM的小伙伴可以参考。</p><p><span>下载地址：</span><a target=\"_blank\" href=\"https://github.com/saysky/ForestBlog\">https://github.com/saysky/ForestBlog</a></p><p><br></p>','2017-10-06 23:44:35','2018-11-25 15:02:01',1,1),(3,'终于开始更新了','<p>距离上一次更新有一年了</p><p>最近抽时间更新一波</p><p><br></p><p><b>主要内容</b></p><p>1、去除 Custom 包</p><p>2、规范 MyBatis 语句</p><p>3、规范注释</p><p>4、删除不必要的字段</p><p>5、修改分类和标签关联关系</p><p>6、添加Redis，加快访问速度</p><p><br></p><p>下载地址：<a target=\"_blank\" href=\"https://github.com/saysky/ForestBlog\">https://github.com/saysky/ForestBlog</a></p><p>谢谢大家鼓励，帮忙点 star 和 fork 哦</p><p><br></p><p>更新时间：2018年11月25日</p>','2018-11-25 20:28:33','2018-11-25 20:28:43',1,2);
/*!40000 ALTER TABLE `notice` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `options`
--

DROP TABLE IF EXISTS `options`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `options` (
  `option_id` int(11) NOT NULL,
  `option_site_title` varchar(255) DEFAULT NULL,
  `option_site_descrption` varchar(255) DEFAULT NULL,
  `option_meta_descrption` varchar(255) DEFAULT NULL,
  `option_meta_keyword` varchar(255) DEFAULT NULL,
  `option_aboutsite_avatar` varchar(255) DEFAULT NULL,
  `option_aboutsite_title` varchar(255) DEFAULT NULL,
  `option_aboutsite_content` varchar(255) DEFAULT NULL,
  `option_aboutsite_wechat` varchar(255) DEFAULT NULL,
  `option_aboutsite_qq` varchar(255) DEFAULT NULL,
  `option_aboutsite_github` varchar(255) DEFAULT NULL,
  `option_aboutsite_weibo` varchar(255) DEFAULT NULL,
  `option_tongji` varchar(255) DEFAULT NULL,
  `option_status` int(1) DEFAULT '1',
  PRIMARY KEY (`option_id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `options`
--

LOCK TABLES `options` WRITE;
/*!40000 ALTER TABLE `options` DISABLE KEYS */;
INSERT INTO `options` VALUES (1,'风吟博客','莫问收获，但问耕耘。','风吟博客,一个简洁的Java博客,言曌程序学习的一个新起点。','风吟,风吟博客,Java博客,SSM博客,言曌,言曌博客','/uploads/2018/11/avatar(3).jpg','博客初心','程序人生，永不止步','/uploads/2017/10/20171006224906122.jpg','847064370','saysky','5936412667',NULL,1);
/*!40000 ALTER TABLE `options` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `page`
--

DROP TABLE IF EXISTS `page`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `page` (
  `page_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `page_key` varchar(50) DEFAULT NULL,
  `page_title` varchar(50) DEFAULT NULL,
  `page_content` mediumtext,
  `page_create_time` datetime DEFAULT NULL,
  `page_update_time` datetime DEFAULT NULL,
  `page_view_count` int(10) unsigned DEFAULT '0',
  `page_comment_count` int(5) unsigned DEFAULT '0',
  `page_status` int(1) unsigned DEFAULT '1',
  PRIMARY KEY (`page_id`) USING BTREE,
  UNIQUE KEY `page_key` (`page_key`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `page`
--

LOCK TABLES `page` WRITE;
/*!40000 ALTER TABLE `page` DISABLE KEYS */;
INSERT INTO `page` VALUES (1,'map','站点地图',NULL,NULL,NULL,0,0,2),(2,'articleFile','文章归档',NULL,NULL,NULL,0,0,2),(3,'message','留言板',NULL,NULL,NULL,0,0,2),(4,'applyLink','申请友链',NULL,NULL,NULL,0,0,2),(5,'aboutSite','关于本站','<h2>关于项目</h2><p>该项目是博主暑假粗略学完&nbsp;<a href=\"https://liuyanzhao.com/tag/ssm/\" title=\"查看与 SSM 相关的文章\" target=\"_blank\">SSM</a>（Spring+SpringMVC+Mybatis）后，开始着手做的一个博客系统。<br>主要涉及的包括 JSP，JSTL，EL表达式，MySQL，Druid连接池，Spring，SpringMVC，MyBatis 等。<br>前端采用Layui框架和扒了一个[网站](http://liuyanzhao.com)的前台样式。通过Maven管理依赖。</p><h2>效果预览</h2><p>预览地址：<a href=\"https://liuyanzhao.com/wp-content/themes/begin/inc/go.php?url=http://blog.liuyanzhao.com\" target=\"_blank\" rel=\"noopener noreferrer\">http://blog.liuyanzhao.com</a></p><p>前台效果图<br><img class=\"alignnone size-large wp-image-6348\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/front-1024x608.jpg\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/front-1024x608.jpg\" alt=\"一个简单漂亮的Java博客系统\" width=\"1024\" height=\"608\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/front-1024x608.jpg 1024w, https://media.liuyanzhao.com/wp-content/uploads/2017/10/front-300x178.jpg 300w, https://media.liuyanzhao.com/wp-content/uploads/2017/10/front-768x456.jpg 768w\" sizes=\"(max-width: 1024px) 100vw, 1024px\"></p><p>后台效果图<br><img class=\"alignnone size-large wp-image-6349\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/back-1024x611.jpg\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/back-1024x611.jpg\" alt=\"一个简单漂亮的Java博客系统\" width=\"1024\" height=\"611\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/back-1024x611.jpg 1024w, https://media.liuyanzhao.com/wp-content/uploads/2017/10/back-300x179.jpg 300w, https://media.liuyanzhao.com/wp-content/uploads/2017/10/back-768x458.jpg 768w\" sizes=\"(max-width: 1024px) 100vw, 1024px\"></p><p>&nbsp;</p><p><span>后台地址：/admin 或者 /login</span></p><p><span>用户名为admin，密码为123456</span></p><p>&nbsp;</p><h2>使用注意</h2><p><strong>1、使用IDE导入项目</strong></p><p>将项目即（ForestBlog文件夹）放到 某个位置，用IDE(如Eclipse，IntelliJ IDEA)导入，然后可以在IDE里运行 Tomcat，访问项目。</p><p>因为该项目使用了`Maven`，所有你需要新的IDE需要有Maven插件或者功能，这里就不多介绍了。</p><p><img class=\"size-large wp-image-6350 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog-517x1024.jpg\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog-517x1024.jpg\" alt=\"一个简单漂亮的Java博客系统\" width=\"517\" height=\"1024\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog-517x1024.jpg 517w, https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog-151x300.jpg 151w, https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog.jpg 681w\" sizes=\"(max-width: 517px) 100vw, 517px\"></p><p><strong>2、 导入数据库</strong></p><p>新建数据库 `forest_blog`，导入数据库（即forest_blog.sql）。注意，数据库的编码和排序规则是utf-8和utf-8_general_ci</p><p><img class=\"size-full wp-image-6352 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog2.jpg\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog2.jpg\" alt=\"一个简单漂亮的Java博客系统\" width=\"400\" height=\"540\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog2.jpg 400w, https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog2-222x300.jpg 222w\" sizes=\"(max-width: 400px) 100vw, 400px\"></p><p><strong>3、修改项目中的数据库连接信息</strong></p><p>修改&nbsp;`db.properties` 文件，该文件很容易找到，在 src/main/resources 中，注意修改数据库地址、表名、用户名和密码。</p><p><span><strong>如果不修改，会出现无法启动项目</strong></span></p><p>&nbsp;</p><p><strong>4、修改上传文件路径</strong></p><p>该项目中，文件上传是传到本地，且和项目文件夹不在一起，就是说是分离的。比如你的项目是在D盘，你可以修改上传路径到E盘。当然我们访问上传的图片时，需要 &nbsp; 给Tomcat添加静态资源映射，比如访问 localhost:8080/uplaods/1.jpg tomcat可以在你的E盘找到。这个在第5步会说。</p><p>现在是修改上传文件路径，该文件在 src/main/java/com/liuyanzhao/blog/controller/Common/UploadFileController.java</p><p>修改第33行的 `String rootPath =\"/www/uploads/\";` 为你的 uploads 的路径。</p><p><span><strong>如果不修改，会出现无法上传图片</strong></span></p><p>&nbsp;</p><p><strong>5、给uploads文件夹添加静态资源映射</strong></p><p>同第4步，我们已经修改了uploads路径，该路径就要和下面的docBase一致。<br>在 tomcat/conf/server.xml 的 Host 标签内添加如下代码</p><div class=\"dp-highlighter\"><ol class=\"dp-j\" start=\"1\"><li class=\"alt\">&lt;Context&nbsp;path=<span class=\"string\">\"/uploads\"</span>&nbsp;docBase=<span class=\"string\">\"/www/uploads\"</span>&nbsp;debug=<span class=\"string\">\"0\"</span>&nbsp;reloadable=<span class=\"string\">\"true\"</span>&nbsp;/&gt;</li></ol></div><p>对啦，如果你使用的是IDE，需要在该IDE里修改。</p><p>比如 IntelliJ IDEA 是在Tomcat配置中添加</p><p><img class=\"alignnone size-large wp-image-6354\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog4-1024x181.jpg\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog4-1024x181.jpg\" alt=\"一个简单漂亮的Java博客系统\" width=\"1024\" height=\"181\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog4-1024x181.jpg 1024w, https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog4-300x53.jpg 300w, https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog4-768x136.jpg 768w, https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog4.jpg 1426w\" sizes=\"(max-width: 1024px) 100vw, 1024px\"></p><p><span><strong>如果不修改，会出现uploads的图片无法加载，网页打开有延迟</strong></span></p><p>&nbsp;</p><p><strong>6、修改 Tomcat的首页为该项目</strong></p><p>跟第5步相似</p><p>该项目中的所有根路径都是 / ，没有使用相对路径的 `${pagecontext.request.getcontextpath}` ,因为如何相对路径不存在，该值就会为空字符串，以致 &nbsp; 首页链接我必须改为 / 。<br>所以，你的项目首页应该是 localhost:8080，而不是loclahost:8080/ForestBlog</p><p>所以要在 server.xml 的Host标签内里添加</p><div class=\"dp-highlighter\"><ol class=\"dp-j\" start=\"1\"><li class=\"alt\">&lt;Context&nbsp;path=<span class=\"string\">\"\"</span>&nbsp;docBase=<span class=\"string\">\"/www/server/panel/vhost/tomcat/ForestBlog\"</span>&nbsp;debug=<span class=\"string\">\"0\"</span>&nbsp;reloadable=<span class=\"string\">\"true\"</span>&nbsp;/&gt;</li></ol></div><p>其中path=\"\"表示为首页,即localhost:8080或者127.0.0.1：8080<br>docBase-\"xxx\"是文件路径</p><p><img class=\"size-large wp-image-6355 aligncenter\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog5-1024x134.jpg\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog5-1024x134.jpg\" alt=\"一个简单漂亮的Java博客系统\" width=\"1024\" height=\"134\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog5-1024x134.jpg 1024w, https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog5-300x39.jpg 300w, https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog5-768x101.jpg 768w, https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog5.jpg 1570w\" sizes=\"(max-width: 1024px) 100vw, 1024px\"></p><p>对啦，如果你使用的是IDE，需要在该IDE里修改。</p><p>比如 IntelliJ IDEA 是在Tomcat配置中添加</p><p><img class=\"alignnone size-large wp-image-6353\" data-original=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog3-1024x321.jpg\" src=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog3-1024x321.jpg\" alt=\"一个简单漂亮的Java博客系统\" width=\"1024\" height=\"321\" srcset=\"https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog3-1024x321.jpg 1024w, https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog3-300x94.jpg 300w, https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog3-768x241.jpg 768w, https://media.liuyanzhao.com/wp-content/uploads/2017/10/blog3.jpg 1428w\" sizes=\"(max-width: 1024px) 100vw, 1024px\"></p><p><span><strong>如果不修改，会出现内页很多链接不对</strong></span></p><p>&nbsp;</p><h2>下载地址：</h2><p>Github地址：<a href=\"https://liuyanzhao.com/wp-content/themes/begin/inc/go.php?url=https://github.com/saysky/ForestBlog\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/saysky/ForestBlog</a></p><p><em>（如果可以帮忙点一次Star和Fork）</em></p><p>&nbsp;</p><h2>更新</h2><p>上一次更新：2017年10月10日14:02:02</p>','2017-10-06 23:40:35','2017-10-10 14:58:12',NULL,NULL,1);
/*!40000 ALTER TABLE `page` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tag`
--

DROP TABLE IF EXISTS `tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tag` (
  `tag_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `tag_name` varchar(50) DEFAULT NULL,
  `tag_description` varchar(255) DEFAULT NULL,
  `tag_image` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`tag_id`) USING BTREE,
  UNIQUE KEY `tag_name` (`tag_name`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tag`
--

LOCK TABLES `tag` WRITE;
/*!40000 ALTER TABLE `tag` DISABLE KEYS */;
INSERT INTO `tag` VALUES (4,'mysql','','/resource/tag/1.jpg'),(5,'shiro','',NULL),(6,'python','',NULL),(7,'数据结构','',NULL);
/*!40000 ALTER TABLE `tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user`
--

DROP TABLE IF EXISTS `user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user` (
  `user_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `user_name` varchar(255) NOT NULL DEFAULT '',
  `user_password` varchar(255) NOT NULL DEFAULT '',
  `user_nickname` varchar(255) NOT NULL DEFAULT '',
  `user_email` varchar(100) DEFAULT '',
  `user_url` varchar(100) DEFAULT '',
  `user_avatar` varchar(255) DEFAULT NULL,
  `user_last_login_ip` varchar(255) DEFAULT NULL,
  `user_register_time` varchar(255) DEFAULT NULL,
  `user_last_login_time` varchar(255) DEFAULT NULL,
  `user_status` int(1) unsigned DEFAULT '1',
  PRIMARY KEY (`user_id`) USING BTREE,
  UNIQUE KEY `user_name` (`user_name`) USING BTREE,
  UNIQUE KEY `user_email` (`user_email`) USING BTREE
) ENGINE=MyISAM AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user`
--

LOCK TABLES `user` WRITE;
/*!40000 ALTER TABLE `user` DISABLE KEYS */;
INSERT INTO `user` VALUES (1,'selenium','selenium','Selenium','895484122@qq.com','',NULL,NULL,'2019-13-20  19:13:05',NULL,1);
/*!40000 ALTER TABLE `user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Final view structure for view `article_tag_view0`
--

/*!50001 DROP VIEW IF EXISTS `article_tag_view0`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `article_tag_view0` AS select `article_tag_ref`.`tag_id` AS `tag_id` from `article_tag_ref` where (`article_tag_ref`.`article_id` = 63) */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `article_tag_view1`
--

/*!50001 DROP VIEW IF EXISTS `article_tag_view1`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `article_tag_view1` AS select `article_tag_ref`.`article_id` AS `article_id` from `article_tag_ref` where `article_tag_ref`.`tag_id` in (select `article_tag_view0`.`tag_id` from `article_tag_view0`) */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `article_tag_view2`
--

/*!50001 DROP VIEW IF EXISTS `article_tag_view2`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `article_tag_view2` AS select `article`.`article_id` AS `article_id`,`article`.`article_title` AS `article_title` from `article` where (`article`.`article_id` in (select `article_tag_view1`.`article_id` from `article_tag_view1`) and (`article`.`article_status` = 1)) */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2019-03-26 22:49:46
